{
    "componentChunkName": "component---src-templates-prob-solving-template-js",
    "path": "/boj1016",
    "result": {"pageContext":{"html":"<h2>문제</h2>\n<p>어떤 정수 X가 1보다 큰 제곱수로 나누어 떨어지지 않을 때, 그 수를 제곱ㄴㄴ수라고 한다. 제곱수는 정수의 제곱이다. min과 max가 주어지면, min보다 크거나 같고, max보다 작거나 같은 제곱ㄴㄴ수가 몇 개 있는지 출력한다.</p>\n<h3>입력</h3>\n<ul>\n<li>첫째 줄에 두 정수 min과 max가 주어진다.</li>\n</ul>\n<h3>출력</h3>\n<ul>\n<li>첫째 줄에 min보다 크거나 같고, max보다 작거나 같은 제곱ㄴㄴ수의 개수를 출력한다.</li>\n</ul>\n<h3>제한</h3>\n<ul>\n<li>1 ≤ min ≤ 1,000,000,000,000</li>\n<li>min ≤ max ≤ min + 1,000,000</li>\n</ul>\n<hr />\n<h4>1. 해결방법 및 소스코드</h4>\n<ul>\n<li>일단, [제한]에서 보듯이, <code>min</code>값이 <code>int</code>로 표현할 수 있는 범위를 넘어가기 때문에 <code>min</code>과 <code>max</code>를 <code>long long</code> 자료형으로 지정해주어야 한다.</li>\n<li>배열도 <code>max</code>만큼의 칸을 할당해줄 수 없으므로, [제한]의 두 번째 조건을 이용해 범위내의 수의 총 개수인<br>\n<code>max-min+1</code>칸을 할당해주도록 한다.</li>\n<li>해당 배열은 제곱ㄴㄴ수가 맞으면 0, 아니면 1을 저장한다.</li>\n<li>배열의 인덱스를 <code>i</code>라고 하면, 인덱스가 실제로 나타내는 수는 <code>min + i</code>이다.</li>\n<li>이제부턴 범위 내의 각 수가 제곱ㄴㄴ수인지 확인할건데, 확인을 시작할 인덱스는 <code>start</code>가 정한다. 예를 들어, 범위가 21에서 35일때, 먼저 2의 제곱인 4로 나누어떨어지는 수들을 제곱ㄴㄴ수에서 지워보자.<br>\n어느 수부터 지워야 할지 정해야 하는데, <code>21 / 4</code>는 5이고, 21~35에서는 24부터가 4로 나눠떨어지는 수이므로 start는 5에서 1을 더하고 4를 곱한 다음(즉, 24를 만들고) <code>min</code>을 뺀 인덱스이다.</li>\n<li>만약 처음부터 <code>min</code> 값이 20과 같이 4로 나눠떨어지는 수이면 <code>start</code>를 바로 0으로 주면 된다.</li>\n<li>그렇게 <code>start</code>를 정하고 for loop으로 배열을 돌면서 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">k^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span>으로 나눠떨어지면 제곱ㄴㄴ수에서 제외시켜준다. 이 때, for loop을 도는 과정에서도 시간을 줄이는 방법이 있는데, 어차피 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">k^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span>으로 나눠떨어지는 수들을\r\n제곱ㄴㄴ수에서 지워줄 것이므로 for loop의 마지막에서 start를 <code>start++</code>하지말고, <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">k^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span>만큼씩 증가시켜주면 훨씬 빠르다.</li>\n</ul>\n<deckgo-highlight-code language=\"cpp\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">#include &lt;iostream&gt;\r\n#include &lt;vector&gt;\r\n\r\nint main()\r\n{\r\n    //min, max 입력\r\n    long long min, max;\r\n    long long count = 0;\r\n    scanf(&quot;%lld %lld&quot;, &amp;min, &amp;max);\r\n\r\n    //제곱ㄴㄴ수이면 0을 저장, 아니면 1을 저장\r\n    //초기: 다 제곱ㄴㄴ수라고 가정하고, 제곱ㄴㄴ수가 아닌 수들만 1로 바꿔준다.\r\n    //배열의 인덱스를 i라 하면 각각의 인덱스가 나타내는 수는 사실상 i+min 이다.\r\n    int isntNoNo[max - min + 1] = {\r\n        0,\r\n    };\r\n\r\n    //max보다 큰 제곱수로 범위 내의 수를 나누는 것은 소용없음.\r\n    for (long long k = 2; k * k &lt;= max; k++)\r\n    {\r\n        long long start;\r\n        if ((min % (k * k)) == 0)\r\n        {\r\n            start = 0;\r\n        }\r\n        else\r\n        {\r\n            start = ((min / (k * k)) + 1) * (k * k) - min;\r\n        }\r\n\r\n        for (; start &lt; max - min + 1; start += (k * k))\r\n        {\r\n            //이미 제곱ㄴㄴ수가 아니라고 확정난 칸은 패스\r\n            if (isntNoNo[start])\r\n                continue;\r\n\r\n            else\r\n            {\r\n                isntNoNo[start] = 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    for (int i = 0; i &lt; max - min + 1; i++)\r\n    {\r\n        if (isntNoNo[i] == 0)\r\n            count++;\r\n    }\r\n\r\n    printf(&quot;%d &quot;, count);\r\n}</code>\n        </deckgo-highlight-code>","title":"[C++] BOJ #1016 제곱ㄴㄴ수","date":"January 29, 2022","next":{"frontmatter":{"path":"/boj6588","title":"[C++] BOJ #6588 골드바흐의 추측"}},"previous":null}},
    "staticQueryHashes": ["3649515864"]}