{
    "componentChunkName": "component---src-templates-prob-solving-template-js",
    "path": "/boj10799",
    "result": {"pageContext":{"html":"<h2>문제</h2>\n<p>여러 개의 쇠막대기를 레이저로 절단하려고 한다. 효율적인 작업을 위해서 쇠막대기를 아래에서 위로 겹쳐 놓고, 레이저를 위에서 수직으로 발사하여 쇠막대기들을 자른다. 쇠막대기와 레이저의 배치는 다음 조건을 만족한다.</p>\n<ul>\n<li>쇠막대기는 자신보다 긴 쇠막대기 위에만 놓일 수 있다. (쇠막대기를 다른 쇠막대기 위에 놓는 경우 완전히 포함되도록 놓되, 끝점은 겹치지 않도록 놓는다.)</li>\n<li>각 쇠막대기를 자르는 레이저는 적어도 하나 존재한다.</li>\n<li>레이저는 어떤 쇠막대기의 양 끝점과도 겹치지 않는다.</li>\n</ul>\n<p>아래 그림은 위 조건을 만족하는 예를 보여준다. 수평으로 그려진 굵은 실선은 쇠막대기이고, 점은 레이저의 위치, 수직으로 그려진 점선 화살표는 레이저의 발사 방향이다.</p>\n<p align=\"center\">\r\n<img alt=\"code_runner_img\" src=\"https://github.com/timosean/timosean.github.io/blob/master/postimages/boj10799.png?raw=true\">\r\n</p>\n<p>이러한 레이저와 쇠막대기의 배치는 다음과 같이 괄호를 이용하여 왼쪽부터 순서대로 표현할 수 있다.</p>\n<ol>\n<li>레이저는 여는 괄호와 닫는 괄호의 인접한 쌍 ‘( ) ’ 으로 표현된다. 또한, 모든 ‘( ) ’는 반드시 레이저를 표현한다.</li>\n<li>쇠막대기의 왼쪽 끝은 여는 괄호 ‘ ( ’ 로, 오른쪽 끝은 닫힌 괄호 ‘) ’ 로 표현된다.</li>\n</ol>\n<p>위 예의 괄호 표현은 그림 위에 주어져 있다.</p>\n<p>쇠막대기는 레이저에 의해 몇 개의 조각으로 잘려지는데, 위 예에서 가장 위에 있는 두 개의 쇠막대기는 각각 3개와 2개의 조각으로 잘려지고, 이와 같은 방식으로 주어진 쇠막대기들은 총 17개의 조각으로 잘려진다.</p>\n<p>쇠막대기와 레이저의 배치를 나타내는 괄호 표현이 주어졌을 때, 잘려진 쇠막대기 조각의 총 개수를 구하는 프로그램을 작성하시오.</p>\n<h3>입력</h3>\n<ul>\n<li>한 줄에 쇠막대기와 레이저의 배치를 나타내는 괄호 표현이 공백없이 주어진다.<br>\n괄호 문자의 개수는 최대 100,000이다.</li>\n</ul>\n<h3>출력</h3>\n<ul>\n<li>잘려진 조각의 총 개수를 나타내는 정수를 한 줄에 출력한다.</li>\n</ul>\n<hr />\n<h4>1. 기본 아이디어 및 소스코드</h4>\n<ul>\n<li>스택을 활용하여 해결한다.</li>\n<li>우선, 그림을 보면서 순차적으로 생각해보았다.<br>\n레이저를 만드는 여는괄호<code>(</code>가 아니면 (즉, 쇠막대기를 구성하는 여는괄호이면) 스택에 쌓았고, <strong>레이저를 만나면 현재 스택에 있는 <code>(</code>의 개수만큼 쇠막대기 조각들이 생성된다.</strong></li>\n<li>쇠막대기 하나를 완성시키는 괄호<code>)</code>가 나오면, 스택에서 여는괄호 하나를 <code>pop</code> 해주고, 전체 쇠막대기 조각 개수를 하나 늘려준다.</li>\n<li>위의 조건들을 만족시켜줄 <code>if</code>문을 잘 작성하면 된다.</li>\n</ul>\n<deckgo-highlight-code language=\"cpp\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">#include &lt;iostream&gt;\r\n#include &lt;cstring&gt;\r\n#include &lt;stack&gt;\r\n\r\nusing namespace std;\r\n\r\nconst int MAX_LENGTH = 100000;\r\n\r\nint main()\r\n{\r\n    //parens: 괄호들이 입력될 배열\r\n    //stack: 쇠막대기와 레이저를 구별하고 저장할 스택\r\n    //total: 잘려진 쇠막대기의 총 개수\r\n    char parens[MAX_LENGTH];\r\n    int total = 0;\r\n    stack&lt;char&gt; stack;\r\n\r\n    scanf(&quot;%s&quot;, parens);\r\n\r\n    //parens 배열 탐색. (레이저와 쇠막대기 구분)\r\n    for (int i = 0; i &lt; strlen(parens); i++)\r\n    {\r\n        //여는괄호 -&gt; 여는괄호면 스택에 쌓고,\r\n        if (parens[i] == &#39;(&#39; &amp;&amp; parens[i + 1] == &#39;(&#39;)\r\n        {\r\n            stack.push(&#39;(&#39;);\r\n        }\r\n\r\n        //여는괄호 -&gt; 닫는괄호이면 레이저이므로 필요한 연산 수행\r\n        else if (parens[i] == &#39;(&#39; &amp;&amp; parens[i + 1] == &#39;)&#39;)\r\n        {\r\n            total += stack.size();\r\n            i++; //한 칸뒤의 닫는괄호까지도 미리 처리해주었으므로\r\n        }\r\n\r\n        //닫는괄호 전이 닫는괄호이면 쇠막대기 하나 없애고 total 개수 하나 추가\r\n        else if (parens[i] == &#39;)&#39; &amp;&amp; parens[i - 1] == &#39;)&#39;)\r\n        {\r\n            total++;\r\n            stack.pop();\r\n        }\r\n    }\r\n\r\n    printf(&quot;%d\\n&quot;, total);\r\n}</code>\n        </deckgo-highlight-code>","title":"[C++] BOJ #10799 쇠막대기","date":"2022. 02. 01","next":{"frontmatter":{"path":"/boj1935","title":"[C++] BOJ #1935 후위 표기식2"}},"previous":{"frontmatter":{"path":"/boj10845","title":"[C++] BOJ #10845 큐"}}}},
    "staticQueryHashes": ["3649515864"]}