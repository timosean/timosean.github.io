{
    "componentChunkName": "component---src-templates-prob-solving-template-js",
    "path": "/boj10828",
    "result": {"pageContext":{"html":"<h2>문제</h2>\n<p>정수를 저장하는 스택을 구현한 다음, 입력으로 주어지는 명령을 처리하는 프로그램을 작성하시오.</p>\n<p>명령은 총 다섯 가지이다.</p>\n<ul>\n<li><code>push X</code>: 정수 X를 스택에 넣는 연산이다.</li>\n<li><code>pop</code>: 스택에서 가장 위에 있는 정수를 빼고, 그 수를 출력한다. 만약 스택에 들어있는 정수가 없는 경우에는 -1을 출력한다.</li>\n<li><code>size</code>: 스택에 들어있는 정수의 개수를 출력한다.</li>\n<li><code>empty</code>: 스택이 비어있으면 1, 아니면 0을 출력한다.</li>\n<li><code>top</code>: 스택의 가장 위에 있는 정수를 출력한다. 만약 스택에 들어있는 정수가 없는 경우에는 -1을 출력한다.</li>\n</ul>\n<h3>입력</h3>\n<ul>\n<li>첫째 줄에 주어지는 명령의 수 N (1 ≤ N ≤ 10,000)이 주어진다. 둘째 줄부터 N개의 줄에는 명령이 하나씩 주어진다. 주어지는 정수는 1보다 크거나 같고, 100,000보다 작거나 같다. 문제에 나와있지 않은 명령이 주어지는 경우는 없다.</li>\n</ul>\n<h3>출력</h3>\n<ul>\n<li>출력해야하는 명령이 주어질 때마다, 한 줄에 하나씩 출력한다.</li>\n</ul>\n<hr />\n<h4>1. 해결방법 및 소스코드</h4>\n<ul>\n<li>C++ STL에 내장되어 있는 stack을 활용하였다.</li>\n<li><code>push X</code> 명령어는 <code>cin</code>을 통해 입력받았다. 연산자 <code>>></code>를 사용하여 <code>cin</code>에서 문자열을 추출할 때 <code>>></code>는 첫 번째 공백까지만 반환하고 <strong>다른 모든 문자는 <code>cin</code>에 남겨져 다음 추출을 기다리는</strong> 특성을 활용하였다.<br>\n따라서, <code>push X</code>를 <code>cin</code>으로 받으면 <code>push</code> 따로, <code>X</code> 따로 변수에 담을 수 있게 되는 것이다.</li>\n</ul>\n<deckgo-highlight-code language=\"cpp\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">#include &lt;iostream&gt;\r\n#include &lt;stack&gt;\r\n#include &lt;string&gt;\r\n\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n    //temp: push 명령으로 받을 정수\r\n    //command: 명령문자열\r\n    int N, temp;\r\n    string command;\r\n    stack&lt;int&gt; stack;\r\n\r\n    //N 입력\r\n    scanf(&quot;%d&quot;, &amp;N);\r\n\r\n    //명령어 입력받고 명령 수행하는 반복문\r\n    for (int i = 0; i &lt; N; i++)\r\n    {\r\n        //명령어 입력\r\n        cin &gt;&gt; command;\r\n\r\n        if (command == &quot;push&quot;)\r\n        {\r\n            cin &gt;&gt; temp;\r\n            stack.push(temp);\r\n        }\r\n\r\n        else if (command == &quot;pop&quot;)\r\n        {\r\n            if (stack.empty())\r\n            {\r\n                printf(&quot;-1\\n&quot;);\r\n            }\r\n            else\r\n            {\r\n                printf(&quot;%d\\n&quot;, stack.top());\r\n                stack.pop();\r\n            }\r\n        }\r\n\r\n        else if (command == &quot;size&quot;)\r\n        {\r\n            printf(&quot;%d\\n&quot;, stack.size());\r\n        }\r\n\r\n        else if (command == &quot;empty&quot;)\r\n        {\r\n            if (stack.empty())\r\n            {\r\n                printf(&quot;1\\n&quot;);\r\n            }\r\n            else\r\n            {\r\n                printf(&quot;0\\n&quot;);\r\n            }\r\n        }\r\n\r\n        else if (command == &quot;top&quot;)\r\n        {\r\n            if (stack.empty())\r\n            {\r\n                printf(&quot;-1\\n&quot;);\r\n            }\r\n            else\r\n            {\r\n                printf(&quot;%d\\n&quot;, stack.top());\r\n            }\r\n        }\r\n    }\r\n}</code>\n        </deckgo-highlight-code>","title":"[C++] BOJ #10828 스택","date":"2022. 01. 31","next":{"frontmatter":{"path":"/boj13171","title":"[C++] BOJ #13171 A"}},"previous":{"frontmatter":{"path":"/boj9012","title":"[C++] BOJ #9012 괄호"}}}},
    "staticQueryHashes": ["3649515864"]}