{
    "componentChunkName": "component---src-templates-prob-solving-template-js",
    "path": "/boj9012",
    "result": {"pageContext":{"html":"<h2>문제</h2>\n<p>괄호 문자열(Parenthesis String, PS)은 두 개의 괄호 기호인 <code>‘(’</code> 와 <code>‘)’</code> 만으로 구성되어 있는 문자열이다. 그 중에서 괄호의 모양이 바르게 구성된 문자열을 올바른 괄호 문자열(Valid PS, VPS)이라고 부른다. 한 쌍의 괄호 기호로 된 <code>“( )”</code> 문자열은 기본 VPS 이라고 부른다. 만일 x 가 VPS 라면 이것을 하나의 괄호에 넣은 새로운 문자열 <code>“(x)”</code>도 VPS 가 된다. 그리고 두 VPS x 와 y를 접합(concatenation)시킨 새로운 문자열 xy도 VPS 가 된다. 예를 들어 <code>“(())()”</code>와 <code>“((()))”</code> 는 VPS 이지만 <code>“(()(”</code>, <code>“(())()))”</code> , 그리고 <code>“(()”</code> 는 모두 VPS 가 아닌 문자열이다.</p>\n<p>여러분은 입력으로 주어진 괄호 문자열이 VPS 인지 아닌지를 판단해서 그 결과를 YES 와 NO 로 나타내어야 한다.</p>\n<h3>입력</h3>\n<ul>\n<li>입력 데이터는 표준 입력을 사용한다. 입력은 T개의 테스트 데이터로 주어진다. 입력의 첫 번째 줄에는 입력 데이터의 수를 나타내는 정수 T가 주어진다. 각 테스트 데이터의 첫째 줄에는 괄호 문자열이 한 줄에 주어진다. 하나의 괄호 문자열의 길이는 2 이상 50 이하이다.</li>\n</ul>\n<h3>출력</h3>\n<ul>\n<li>출력은 표준 출력을 사용한다. 만일 입력 괄호 문자열이 올바른 괄호 문자열(VPS)이면 “YES”, 아니면 “NO”를 한 줄에 하나씩 차례대로 출력해야 한다.</li>\n</ul>\n<hr />\n<h4>1. 아이디어 및 실수</h4>\n<ul>\n<li><strong>아이디어</strong>: 스택을 활용하여 여는 괄호가 나오면 쌓고, 닫는 괄호가 나오면 스택에서 여는 괄호 하나를 <code>pop</code>해준다. 여는괄호와 닫는괄호의 쌍이 딱 맞아 최종 상태가 스택이 비는 경우면 YES, 아니면 NO</li>\n<li><strong>실수</strong>: 아이디어의 방향성은 맞았지만, 빼먹은 경우가 있었다. 바로, 닫는괄호가 너무 많아서 <strong>스택이 비어있음에도 불구하고 <code>pop</code>을 시도하는 경우를 막지 못한 것.</strong> 따라서, 이것 때문에 백준에서 <code>Segfault</code> 에러가 떴고,\r\n최종 소스코드는 다음과 같다.</li>\n</ul>\n<deckgo-highlight-code language=\"cpp\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">#include &lt;iostream&gt;\r\n#include &lt;stack&gt;\r\n#include &lt;cstring&gt;\r\n\r\nusing namespace std;\r\n\r\nvoid judgeVPS()\r\n{\r\n    //parens: 괄호들을 담을 배열\r\n    //parenStack: 문제를 해결하기 위한 스택\r\n    char parens[55] = {\r\n        0,\r\n    };\r\n    stack&lt;char&gt; parenStack;\r\n\r\n    //괄호 문자열 입력\r\n    scanf(&quot;%s&quot;, &amp;parens);\r\n\r\n    //괄호들을 스택에 push\r\n    //단, &#39;)&#39;를 만나면 pop을 한다.\r\n    for (int j = 0; j &lt; strlen(parens); j++)\r\n    {\r\n        if (parens[j] == &#39;(&#39;)\r\n        {\r\n            parenStack.push(parens[j]);\r\n        }\r\n\r\n        else\r\n        {\r\n            //스택이 비어있는데도 닫는괄호가 들어온 경우를 처리해아함.\r\n            if (parenStack.empty())\r\n            {\r\n                printf(&quot;NO\\n&quot;);\r\n                return;\r\n            }\r\n\r\n            else\r\n            {\r\n                parenStack.pop();\r\n            }\r\n        }\r\n    }\r\n\r\n    if (parenStack.empty() == true)\r\n    {\r\n        printf(&quot;YES\\n&quot;);\r\n    }\r\n    else\r\n    {\r\n        printf(&quot;NO\\n&quot;);\r\n    }\r\n\r\n    return;\r\n}\r\n\r\nint main()\r\n{\r\n    int T;\r\n\r\n    scanf(&quot;%d&quot;, &amp;T);\r\n\r\n    for (int i = 0; i &lt; T; i++)\r\n    {\r\n        judgeVPS();\r\n    }\r\n}</code>\n        </deckgo-highlight-code>","title":"[C++] BOJ #9012 괄호","date":"2022. 01. 31","next":{"frontmatter":{"path":"/boj10828","title":"[C++] BOJ #10828 스택"}},"previous":{"frontmatter":{"path":"/boj1935","title":"[C++] BOJ #1935 후위 표기식2"}}}},
    "staticQueryHashes": ["3649515864"]}