{
    "componentChunkName": "component---src-templates-prob-solving-template-js",
    "path": "/boj1158",
    "result": {"pageContext":{"html":"<h2>문제</h2>\n<p>요세푸스 문제는 다음과 같다.</p>\n<p>1번부터 N번까지 N명의 사람이 원을 이루면서 앉아있고, 양의 정수 K(≤ N)가 주어진다. 이제 순서대로 K번째 사람을 제거한다. 한 사람이 제거되면 남은 사람들로 이루어진 원을 따라 이 과정을 계속해 나간다. 이 과정은 N명의 사람이 모두 제거될 때까지 계속된다. 원에서 사람들이 제거되는 순서를 (N, K)-요세푸스 순열이라고 한다. 예를 들어 (7, 3)-요세푸스 순열은 &#x3C;3, 6, 2, 7, 5, 1, 4>이다.</p>\n<p>N과 K가 주어지면 (N, K)-요세푸스 순열을 구하는 프로그램을 작성하시오.</p>\n<h3>입력</h3>\n<ul>\n<li>첫째 줄에 N과 K가 빈 칸을 사이에 두고 순서대로 주어진다. (1 ≤ K ≤ N ≤ 5,000)</li>\n</ul>\n<h3>출력</h3>\n<ul>\n<li>예제와 같이 요세푸스 순열을 출력한다.</li>\n<li>예제입력: <code>7 3</code></li>\n<li>예제출력: <code>&#x3C;3, 6, 2, 7, 5, 1, 4></code></li>\n</ul>\n<hr />\n<h4>1. 아이디어 및 소스코드</h4>\n<ul>\n<li>C++ STL에 내장되어 있는 queue를 활용하였다.</li>\n<li>고민을 상당히 많이했는데, <strong>\"앞에서\"부터 K번째 놈을 죽인다</strong>는 기초적인 아이디어부터 시작이었다.</li>\n<li>예를 들어, 위의 예제입력에서, 앞에서부터 3번째 놈을 죽이면 3은 죽고 <strong>1과 2는 일단은 죽음을 피했으니 죽는 순서가 뒤로 미뤄진다. 즉, queue의 뒤에 삽입한다!</strong></li>\n<li>3은 죽었으니 원탁에서 빠진다.(pop)</li>\n<li>마찬가지로, 4와 5는 패스하고 6은 죽는다. 여기에서 4와 5의 죽는 순서가 뒤로 미뤄진다.</li>\n<li>이렇게해서 계속 <strong>큐의 앞과 뒤에서 pop, push 해주면서 번갈아가면 된다.</strong></li>\n</ul>\n<deckgo-highlight-code language=\"cpp\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">#include &lt;iostream&gt;\r\n#include &lt;queue&gt;\r\n\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n    //result: 순열을 담을 배열\r\n    int N, K;\r\n    int idx = 0;\r\n    int result[5000];\r\n    queue&lt;int&gt; q;\r\n\r\n    scanf(&quot;%d %d&quot;, &amp;N, &amp;K);\r\n\r\n    //큐에 번호 저장\r\n    for (int i = 1; i &lt;= N; i++)\r\n    {\r\n        q.push(i);\r\n    }\r\n\r\n    //요세푸스 시작\r\n    //K번째 사람이 죽는것이므로, 앞에서부터 K-1번째 사람까지는 큐의 뒤로 죽는순서를 미뤄줌. (큐의 맨 뒤로 가세요!)\r\n    //그렇게하면, K번째 사람이 큐의 맨 앞으로 와서 죽고, pop 당하면 된다. 이 때, result 배열에 기록!\r\n    for (int i = 0; i &lt; N; i++)\r\n    {\r\n        for (int j = 0; j &lt; K - 1; j++)\r\n        {\r\n            q.push(q.front());\r\n            q.pop();\r\n        }\r\n        result[idx++] = q.front();\r\n        q.pop();\r\n    }\r\n\r\n    printf(&quot;&lt;&quot;);\r\n    for (int i = 0; i &lt; N - 1; i++)\r\n    {\r\n        printf(&quot;%d, &quot;, result[i]);\r\n    }\r\n    printf(&quot;%d&gt;&quot;, result[N - 1]);\r\n}</code>\n        </deckgo-highlight-code>","title":"[C++] BOJ #1158 요세푸스 문제","date":"2022. 02. 06","next":{"frontmatter":{"path":"/boj16120","title":"[C++] BOJ #16120 PPAP"}},"previous":{"frontmatter":{"path":"/boj2164","title":"[C++] BOJ #2164 카드2"}}}},
    "staticQueryHashes": ["3649515864"]}