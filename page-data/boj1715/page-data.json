{
    "componentChunkName": "component---src-templates-prob-solving-template-js",
    "path": "/boj1715",
    "result": {"pageContext":{"html":"<h2>문제</h2>\n<p>정렬된 두 묶음의 숫자 카드가 있다고 하자. 각 묶음의 카드의 수를 A, B라 하면 보통 두 묶음을 합쳐서 하나로 만드는 데에는 A+B 번의 비교를 해야 한다. 이를테면, 20장의 숫자 카드 묶음과 30장의 숫자 카드 묶음을 합치려면 50번의 비교가 필요하다.</p>\n<p>매우 많은 숫자 카드 묶음이 책상 위에 놓여 있다. 이들을 두 묶음씩 골라 서로 합쳐나간다면, 고르는 순서에 따라서 비교 횟수가 매우 달라진다. 예를 들어 10장, 20장, 40장의 묶음이 있다면 10장과 20장을 합친 뒤, 합친 30장 묶음과 40장을 합친다면 (10 + 20) + (30 + 40) = 100번의 비교가 필요하다. 그러나 10장과 40장을 합친 뒤, 합친 50장 묶음과 20장을 합친다면 (10 + 40) + (50 + 20) = 120 번의 비교가 필요하므로 덜 효율적인 방법이다.</p>\n<p>N개의 숫자 카드 묶음의 각각의 크기가 주어질 때, 최소한 몇 번의 비교가 필요한지를 구하는 프로그램을 작성하시오.</p>\n<h3>입력</h3>\n<ul>\n<li>첫째 줄에 N이 주어진다. (1 ≤ N ≤ 100,000) 이어서 N개의 줄에 걸쳐 숫자 카드 묶음의 각각의 크기가 주어진다. 숫자 카드 묶음의 크기는 1,000보다 작거나 같은 양의 정수이다.</li>\n</ul>\n<h3>출력</h3>\n<ul>\n<li>첫째 줄에 최소 비교 횟수를 출력한다.</li>\n</ul>\n<hr />\n<h4>1. 해결방법 및 소스코드</h4>\n<ul>\n<li>최소 힙을 기반으로 한 우선순위 큐(Priority Queue)를 이용하였다. (입력된 수들을 오름차순으로 정렬하고 차례대로 더해나갔을 때가 최소가 됨)</li>\n<li>우선순위 큐의 앞의 두 수를 더한 값을 다시 큐에 넣어준다.</li>\n<li>여기서 오답에 주의할 것은 <strong><code>N==1</code>일 때 한 묶음은 이미 정렬이 되어있으므로 0을 출력해야한다는 것</strong>이다.</li>\n</ul>\n<deckgo-highlight-code language=\"cpp\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">#include &lt;iostream&gt;\r\n#include &lt;queue&gt;\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n    int N, x, temp;\r\n    int sum = 0;\r\n    priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; pq;\r\n\r\n    scanf(&quot;%d&quot;, &amp;N);\r\n\r\n    for (int i = 0; i &lt; N; i++)\r\n    {\r\n        scanf(&quot;%d&quot;, &amp;x);\r\n        pq.push(x);\r\n    }\r\n\r\n    if (N == 1)\r\n    {\r\n        printf(&quot;0\\n&quot;);\r\n        return 0;\r\n    }\r\n\r\n    else\r\n    {\r\n\r\n        for (int i = 0; i &lt; N - 1; i++)\r\n        {\r\n            temp = pq.top();\r\n            pq.pop();\r\n            temp += pq.top();\r\n            pq.pop();\r\n            pq.push(temp);\r\n            sum += temp;\r\n        }\r\n    }\r\n\r\n    printf(&quot;%d\\n&quot;, sum);\r\n}</code>\n        </deckgo-highlight-code>","title":"[C++] BOJ #1715 카드 정렬하기","date":"2022. 02. 18","next":{"frontmatter":{"path":"/boj11286","title":"[C++] BOJ #11286 절댓값 힙"}},"previous":{"frontmatter":{"path":"/boj17612","title":"[C++] BOJ #17612 쇼핑몰"}}}},
    "staticQueryHashes": ["3649515864"]}