{
    "componentChunkName": "component---src-templates-prob-solving-template-js",
    "path": "/aboutdp",
    "result": {"pageContext":{"html":"<h2>⚙동적 프로그래밍(DP: Dynamic Programming)</h2>\n<p>여기서 프로그래밍은 <strong>\"테이블을 만든다\"</strong> 는 뜻이라고 한다. 그리고 다이나믹..하지도 않다.<br>\n그래서 어떤 서울대 교수님은 <strong>기억하기 프로그래밍</strong>이라는 용어를 쓰기도 한다고 한다.</p>\n<p>우선, 동적 프로그래밍은 <strong>어떠한 큰 문제를 작은 문제로 나누어 푸는 방법</strong>을 일컫는 풀이방법이다.<br>\n밑에서 더 자세히 살펴보기로 하자.</p>\n<hr/>\n<h3>[1] 대략적인 풀이 흐름</h3>\n<h4>1. Divide and Conquer(분할정복)과 비슷하지만 차이가 있다.</h4>\n<p>분할정복과의 결정적인 차이점은 바로 <strong>작은 문제가 중복이 일어나는지 안 일어나는지 여부</strong>이다.</p>\n<ul>\n<li><code>분할정복</code>: 큰 문제를 해결하기 어려워 <strong>단지</strong> 작은 문제로 나누어 푸는 방법.<br>\n근데 이 작은 문제에서 반복되는 부분은 없음!</li>\n<li><code>동적프로그래밍</code>: 작은 부분문제들이 반복되는 것(답도 바뀌지 않음)을 이용하여 풀어나가는 방법.</li>\n</ul>\n<br />\n<h4>2. Dynamic Programming의 조건</h4>\n<ul>\n<li>작은 문제가 반복이 일어나는 경우</li>\n<li>같은 문제는 구할 때마다 정답이 같다.</li>\n</ul>\n<br />\n<h4>3. Memoization(메모이제이션)</h4>\n<p>'동적 프로그래밍'에서는 <strong>작은 문제들이 반복</strong>되고, 이 작은 문제들의 <strong>결과값이 항상 같다!</strong> 따라서, 이 점을 이용하여 한 번 계산했던 작은 문제의 답을 저장해놓고, 동일한 문제가 발생했을 때 이 결과값을 다시 사용하여\r\n중복 계산을 줄일 수 있게 된다. 이를 <code>Memoization</code>이라고 한다.</p>\n<p>피보나치 수열 문제 풀이를 예로 들 수 있다. 아래와 같이 코드를 짜자.</p>\n<deckgo-highlight-code language=\"cpp\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">int fiboData[100];\r\n\r\nint fibo(int n) {\r\n    fiboData[0] = 0;\r\n    fiboData[1] = 1;\r\n\r\n    if(n&lt;=1) {\r\n        return fiboData[n];\r\n    }\r\n\r\n    else {\r\n        for(int i=2; i&lt;=n; i++) {\r\n            fiboData[i] = fiboData[i-1] + fiboData[i-2];\r\n        }\r\n\r\n        return fiboData[n];\r\n    }\r\n}</code>\n        </deckgo-highlight-code>\n<br />\n<p><code>fiboData</code>라는 배열을 생성한다. 이 배열에는 연산한 값들이 저장될 것이다. <code>n</code>이 1 이하일 경우 0 또는 1을 반환하고, <code>n</code>이 2 이상인 경우 <code>fiboData</code>배열을 <code>n</code>까지 연산하여 업데이트 시켜준 다음,\r\n<code>fiboData[n]</code>을 반환한다. 이렇게 되면 중복적인 계산이 줄어들게 된다.</p>\n<hr />\n<h3>[2] Bottom-Up 과 Top-Down 방식</h3>\n<p>Bottom-Up은 가장 작은 문제들부터 답을 구해가며 전체 문제의 답을 찾는 방식이며,<br>\nTop-Down은 가장 큰 문제를 방문한 후 작은 문제들을 호출하여 답을 찾는 방식이다.</p>\n<p>흔히 Top-Down은 <strong>재귀 호출</strong>을, Bottom-Up은 <strong>반복문</strong>을 이용하여 구현한다.</p>\n<h4>1. Bottom-Up 방식</h4>\n<p>Bottom-Up 방식은 보통 <strong>반복문</strong>을 활용하여 해결한다. 위의 피보나치 코드가 Bottom-Up 방식이다.<br>\n즉, 문제풀이가 아래에서 위로 진행된다. (fiboData를 0부터 n까지 차근차근 구해나감)</p>\n<br />\n<h4>2. Top-Down 방식</h4>\n<p>큰 문제를 풀 때, 작은 문제가 아직 풀리지 않았다면 그제서야 작은 문제를 해결한다. 즉, 문제풀이가 위에서 아래로 진행된다. 아래의 피보나치 코드를 보고 느낌을 이해하면 되겠다. (fiboData를 n부터 0까지 구해나감. 필요한 데이터가 없다면 그때가서야 구해서 쓴다.)</p>\n<deckgo-highlight-code language=\"cpp\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">int fiboData[100];\r\n\r\nfiboData[0] = 0;\r\nfiboData[1] = 1;\r\n\r\nint fibo(int n) {\r\n    if(n&lt;=1)\r\n        return fiboData[n];\r\n    else\r\n        return fibo(n-1) + fibo(n-2);\r\n}</code>\n        </deckgo-highlight-code>\n<br />\n<h4>3. Top-Down이 좋은가, Bottom-Up이 좋은가?</h4>\n<p>이 질문에는 정답이 없다고 한다.<br>\n<code>Top-Down</code>의 경우에는 소스코드의 가독성이 증가한다는 장점이 있지만 작성하기 조금 어렵다는 단점이 있고, <code>Bottom-Up</code>의 경우에는 풀기는 쉽지만 소스의 가독성이 저하될 수도 있다.</p>\n<p>나는 백준 문제를 풀 때에는 Bottom-Up으로 풀면 통과하지만, Top-Down으로 풀면 재귀가 너무 많이 돌아가서 시간초과가 뜨는 경우를 많이 보긴 했다.</p>\n<br />\n<h4>4. 동적 프로그래밍: 규칙이 있다!</h4>\n<p>동적 프로그래밍으로 풀 수 있는 문제에는 <strong>점화식</strong>이라던가(ex. 피보나치는<br>\n<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mn>0</mn></msub><mo>=</mo><mn>0</mn><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>1</mn></msub><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><msub><mi>a</mi><mi>n</mi></msub><mo>=</mo><msub><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo>></mo><mo>=</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">a_0=0, a_1=1, a_n = a_{n-1} + a_{n-2} (n >= 2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7917em;vertical-align:-0.2083em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">>=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span></span>) 세울 수 있는 규칙 또는 식이 존재한다.<br>\n이 규칙을 잘 찾아서 이전에 구해놓은 작은 문제들인 dp[0], dp[1], dp[2], dp[3] 등을 이용해 풀어나가면 된다. 혹은 이것들을 이용해 점화식을 도출해낼 수도 있다.</p>","title":"동적 프로그래밍(Dynamic Programming)이란?","date":"2022. 02. 26","next":{"frontmatter":{"path":"/boj11726","title":"[C++] BOJ #11726 2×n 타일링"}},"previous":{"frontmatter":{"path":"/boj11048","title":"[C++] BOJ #11048 이동하기"}}}},
    "staticQueryHashes": ["3649515864"]}