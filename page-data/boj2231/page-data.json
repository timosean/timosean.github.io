{
    "componentChunkName": "component---src-templates-prob-solving-template-js",
    "path": "/boj2231",
    "result": {"pageContext":{"html":"<h2>문제</h2>\n<p>어떤 자연수 N이 있을 때, 그 자연수 N의 분해합은 N과 N을 이루는 각 자리수의 합을 의미한다. 어떤 자연수 M의 분해합이 N인 경우, M을 N의 생성자라 한다. 예를 들어, 245의 분해합은 256(=245+2+4+5)이 된다. 따라서 245는 256의 생성자가 된다. 물론, 어떤 자연수의 경우에는 생성자가 없을 수도 있다. 반대로, 생성자가 여러 개인 자연수도 있을 수 있다.</p>\n<p>자연수 N이 주어졌을 때, N의 가장 작은 생성자를 구해내는 프로그램을 작성하시오.</p>\n<h3>입력</h3>\n<ul>\n<li>첫째 줄에 자연수 N(1 ≤ N ≤ 1,000,000)이 주어진다.</li>\n</ul>\n<h3>출력</h3>\n<ul>\n<li>첫째 줄에 답을 출력한다. 생성자가 없는 경우에는 0을 출력한다.</li>\n</ul>\n<hr />\n<h4>해결방법 및 소스코드</h4>\n<p><strong>Brute Force</strong> 방식으로 해결하였다.</p>\n<ul>\n<li>분해합이 N이 되기 위해 <code>for</code>문을 0부터 N까지 반복하여, 각 <code>i</code>의 분해합을 구한 후, 그 분해합이 N이 맞는지 확인한다.</li>\n<li><code>i</code>의 분해합이 N이 맞으면 생성자로 <code>i</code>를 반환하고, 반복문을 끝까지 돌았음에도 불구하고 <code>i</code>가 N에 대한 생성자가 되지 못했다면 0을 반환한다.</li>\n</ul>\n<deckgo-highlight-code language=\"cpp\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">#include &lt;iostream&gt;\r\n\r\nusing namespace std;\r\n\r\nint getGenerator(int &amp;N)\r\n{\r\n\r\n    //bsum: 분해합을 담을 변수, 분해합이 N이 되면 종료\r\n    //generator: 생성자\r\n    int bsum = 0;\r\n    int generator = 0;\r\n    int temp = 0;\r\n\r\n    //N을 만들 수 있는 최소 생성자를 찾아내는 반복문\r\n    for (int i = 0; i &lt; N; i++)\r\n    {\r\n        bsum += i;\r\n        temp = i;\r\n\r\n        //주어진 i에 대한 분해합 구하는 반복문\r\n        while (temp &gt; 0)\r\n        {\r\n            bsum += temp % 10;\r\n            temp = temp / 10;\r\n        }\r\n\r\n        //만약 i로 만든 분해합이 목표치 N과 같다면\r\n        //생성자로 i를 반환하고 탈출\r\n        if (bsum == N)\r\n        {\r\n            generator = i;\r\n            break;\r\n        }\r\n\r\n        //해당 i의 분해합으로 N을 충족시키지 못한다면 bsum을 0으로 초기화\r\n        bsum = 0;\r\n    }\r\n\r\n    return generator;\r\n}\r\n\r\nint main()\r\n{\r\n    int N;\r\n    cin &gt;&gt; N;\r\n\r\n    cout &lt;&lt; getGenerator(N);\r\n}</code>\n        </deckgo-highlight-code>","title":"[C++] BOJ #2231 분해합","date":"January 25, 2022","next":{"frontmatter":{"path":"/boj2798","title":"[C++] BOJ #2798 블랙잭"}},"previous":{"frontmatter":{"path":"/boj14888","title":"[C++] BOJ #14888 연산자 끼워넣기"}}}},
    "staticQueryHashes": ["3649515864"]}