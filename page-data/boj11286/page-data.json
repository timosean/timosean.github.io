{
    "componentChunkName": "component---src-templates-prob-solving-template-js",
    "path": "/boj11286",
    "result": {"pageContext":{"html":"<h2>문제</h2>\n<p>절댓값 힙은 다음과 같은 연산을 지원하는 자료구조이다.</p>\n<ol>\n<li>배열에 정수 x (x ≠ 0)를 넣는다.</li>\n<li>배열에서 절댓값이 가장 작은 값을 출력하고, 그 값을 배열에서 제거한다. 절댓값이 가장 작은 값이 여러개일 때는, 가장 작은 수를 출력하고, 그 값을 배열에서 제거한다.</li>\n</ol>\n<p>프로그램은 처음에 비어있는 배열에서 시작하게 된다.</p>\n<h3>입력</h3>\n<ul>\n<li>첫째 줄에 연산의 개수 N(1≤ N ≤100,000)이 주어진다. 다음 N개의 줄에는 연산에 대한 정보를 나타내는 정수 x가 주어진다. 만약 x가 0이 아니라면 배열에 x라는 값을 넣는(추가하는) 연산이고, x가 0이라면 배열에서 절댓값이 가장 작은 값을 출력하고 그 값을 배열에서 제거하는 경우이다. 입력되는 정수는 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding=\"application/x-tex\">-2^{31}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">31</span></span></span></span></span></span></span></span></span></span></span></span></span> 보다 크고, <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{31}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">31</span></span></span></span></span></span></span></span></span></span></span></span></span> 보다 작다.</li>\n</ul>\n<h3>출력</h3>\n<ul>\n<li>입력에서 0이 주어진 회수만큼 답을 출력한다. 만약 배열이 비어 있는 경우인데 가장 큰 값을 출력하라고 한 경우에는 0을 출력하면 된다.</li>\n</ul>\n<hr />\n<h4>1. 사용한 자료구조</h4>\n<ul>\n<li>C++의 <queue> 헤더파일 안에 있는 <code>priority_queue</code>를 사용하였다.</li>\n<li><code>priority_queue</code>를 선언할 때, 정렬 기준을 정해주어야 하는데 여기서는 절댓값의 크기 비교를 위한 <strong>Custom Sort</strong>를 만들어서 넣어주어야 했다.</li>\n</ul>\n<h4>2. Priority Queue에서 Custom Sort는 어떻게?</h4>\n<ul>\n<li><code>priority_queue</code>에서 <strong>Custom Sort</strong>를 하는 방법은 <strong>bool operator() 를 오버라이딩</strong>하여 사용하면 된다고 한다.</li>\n<li>여기서 <code>()</code>는 <strong>함수 호출 연산자</strong>이다.</li>\n<li>C++은 <strong>객체 이름만으로 호출 가능한 함수</strong>를 만들 수 있으며, 이와 관련된 호출방법을 지원한다고 한다. 이 방법을 사용하기 위해서 준비된 키워드가 <code>operator ()</code>이다.\r\n객체 이름의 함수를 <strong>클래스 정의 시 바로 적시할 수 없으므로</strong> 이런 키워드가 고안된 듯 하다고 한다. (출처 - <a href=\"https://wowcat.tistory.com/3060\">https://wowcat.tistory.com/3060</a>)</li>\n<li>다음으로, <code>priority_queue</code>에서 사용하는 <code>greater&#x3C;자료형></code>와 <code>less&#x3C;자료형></code>은 다음과 같이 이루어져 있다.</li>\n</ul>\n<deckgo-highlight-code language=\"cpp\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">template&lt;class _Ty&gt;\r\nstruct greater {\r\n    bool operator()(const _Ty&amp; _Left, const _Ty&amp; _Right) const {\r\n        return (_Left &gt; _Right);\r\n    }\r\n};\r\n//less는 부등호 방향을 반대로 하면 됨</code>\n        </deckgo-highlight-code>\n<br />\n<ul>\n<li>따라서, 우리도 <code>구조체</code>와 <code>operator () 오버라이딩</code>을 이용하여 <strong>Custom Compare</strong>를 만들 것이다.</li>\n</ul>\n<h4>3. Priority Queue에서 Sort를 하는 방식</h4>\n<ul>\n<li>보통 예를들어 <code>내림차순</code>을 구현하는 compare 함수를 작성할 때에는 앞에 있는 원소가 뒤에 있는 원소보다 앞에 와야할 때 true를 리턴하도록 한다.</li>\n<li>하지만, Priority Queue는 다르다! <strong>Priority Queue의 top 원소는 container의 BACK에 있는 원소</strong>이기 때문이다.<br>\n(출처 - <a href=\"https://huilife.tistory.com/entry/C-Priority-Queue%EC%9D%98-custom-sort\">https://huilife.tistory.com/entry/C-Priority-Queue%EC%9D%98-custom-sort</a>)</li>\n<li>따라서, 내림차순으로 정렬한다고 했을 때, container의 가장 마지막 원소가 가장 큰 원소여야 한다는 것이다. (그래서 전 게시물에서 최소 힙을 만들때도 비교함수 자리에 <code>greater&#x3C;int></code>를 썼었음)</li>\n<li>이번 문제는 \"절댓값 최소 힙\"이라고 부를 수 있으므로, Compare 구조체를 다음과 같이 만들어주겠다. 문제 조건에서 \"절댓값이 같은 경우 음수를 먼저 출력\"하도록 했으므로 container 상에서 양수가 음수 앞에 있어야 한다.</li>\n</ul>\n<deckgo-highlight-code language=\"cpp\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">struct compare\r\n{\r\n    bool operator()(int &amp;A, int &amp;B)\r\n    {\r\n        if (abs(A) == abs(B))\r\n        {\r\n            return A &gt; B;\r\n        }\r\n\r\n        else\r\n            return abs(A) &gt; abs(B);\r\n    }\r\n};</code>\n        </deckgo-highlight-code>\n<br />\n<h4>4. 최종 소스코드</h4>\n<deckgo-highlight-code language=\"cpp\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">#include &lt;iostream&gt;\r\n#include &lt;algorithm&gt;\r\n#include &lt;queue&gt;\r\n#include &lt;cmath&gt;\r\nusing namespace std;\r\n\r\nstruct compare\r\n{\r\n    bool operator()(int &amp;A, int &amp;B)\r\n    {\r\n        if (abs(A) == abs(B))\r\n        {\r\n            return A &gt; B;\r\n        }\r\n\r\n        else\r\n            return abs(A) &gt; abs(B);\r\n    }\r\n};\r\n\r\nint main()\r\n{\r\n    priority_queue&lt;int, vector&lt;int&gt;, compare&gt; pq;\r\n    int N, x;\r\n\r\n    scanf(&quot;%d&quot;, &amp;N);\r\n\r\n    for (int i = 0; i &lt; N; i++)\r\n    {\r\n        scanf(&quot;%d&quot;, &amp;x);\r\n\r\n        if (x == 0)\r\n        {\r\n            if (pq.empty())\r\n            {\r\n                printf(&quot;0\\n&quot;);\r\n            }\r\n            else\r\n            {\r\n                printf(&quot;%d\\n&quot;, pq.top());\r\n                pq.pop();\r\n            }\r\n        }\r\n\r\n        else\r\n        {\r\n            pq.push(x);\r\n        }\r\n    }\r\n}</code>\n        </deckgo-highlight-code>","title":"[C++] BOJ #11286 절댓값 힙","date":"2022. 02. 17","next":{"frontmatter":{"path":"/boj1927","title":"[C++] BOJ #1927 최소 힙"}},"previous":null}},
    "staticQueryHashes": ["3649515864"]}