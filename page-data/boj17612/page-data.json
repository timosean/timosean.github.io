{
    "componentChunkName": "component---src-templates-prob-solving-template-js",
    "path": "/boj17612",
    "result": {"pageContext":{"html":"<h2>문제</h2>\n<p>대형 쇼핑몰에서 쇼핑을 마친 N명의 고객들이 계산을 하고 쇼핑몰을 떠나고자 계산대 앞에 줄을 서 있다. 각 고객은 커다란 짐수레(cart)에 물건을 담아 계산대로 간다. 쇼핑몰에는 아래 그림과 같이 K개의 계산대가 병렬로 배치되어 있다. 쇼핑몰 안내원들은 계산대에 온 사람들을 가장 빨리 계산을 마칠 수 있는 계산대로 안내를 한다. 안내원은 각 계산대에서 기다리고 있는 사람들이 계산을 하는데 얼마나 걸리는지 이미 알고 있다.</p>\n<p>안내원이 고객을 계산대로 안내할 때 두 계산대에서 기다려야 할 시간이 같을 경우에는 가장 번호가 작은 계산대로 안내를 한다. 즉 3번, 5번 계산대에서 기다릴 시간이 똑같이 15분으로 최소일 경우에는 3번으로 안내를 한다.</p>\n<p>계산을 마친 고객은 출구를 통하여 쇼핑몰을 완전히 빠져 나간다. 만일 계산대에서 계산을 마친 고객의 시간이 동일하다면 출구에 가까운 높은 번호 계산대의 고객부터 먼저 빠져나간다. 예를 들어 두 계산대 4번과 10번에서 두 고객이 동시에 계산을 마쳤다면 계산대의 번호가 더 높은 10번 계산대의 고객이 먼저 쇼핑몰을 나간다. 물건을 계산하는 데에는 종류에 관계없이 동일하게 1분이 소요된다. 즉, 물건이 w개 있는 손님이 계산을 마치는 데에는 정확히 w분이 소요된다.</p>\n<p>여러분은 계산대로 들어가기 위하여 줄을 서 있는 고객 N명의 정보( 회원번호, 구매한 물건의 수)를 알고 있을 때, 이들이 계산을 하고 쇼핑몰을 빠져나오는 순서를 구해야 한다. 계산대로 들어가고 계산대에서 나오는데 걸리는 시간은 없다고 가정한다.</p>\n<h3>입력</h3>\n<ul>\n<li>입력의 첫 줄에는 2개의 정수 N(1 ≤ N ≤ 100,000)과 k(1 ≤ k ≤ 100,000)가 주어진다. 다음 줄부터 N개의 줄에 걸쳐 고객 N명의 정보가 줄 맨 앞의 고객부터 맨 뒤 고객까지 순서대로 주어진다. i번째 줄은 줄의 앞에서 i번째 고객의 회원번호 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><msub><mi>d</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">id_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span>(1 ≤ <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><msub><mi>d</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">id_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> ≤ 1,000,000)와 그가 구입한 물건의 수 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">w_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span>(1 ≤ <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">w_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> ≤ 20)로 이루어져 있다. N명의 회원번호는 모두 다르다.</li>\n</ul>\n<h3>출력</h3>\n<ul>\n<li>고객 N명의 회원번호를 쇼핑몰을 빠져나가는 순서대로 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>r</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>r</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><msub><mi>r</mi><mi>N</mi></msub></mrow><annotation encoding=\"application/x-tex\">r_1, r_2, \\cdots, r_N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> 이라 할 때,<br>\n<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>×</mo><msub><mi>r</mi><mn>1</mn></msub><mo>+</mo><mn>2</mn><mo>×</mo><msub><mi>r</mi><mn>2</mn></msub><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>N</mi><mo>×</mo><msub><mi>r</mi><mi>N</mi></msub></mrow><annotation encoding=\"application/x-tex\">1×r_1 + 2×r_2 + \\cdots + N×r_N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> 의 값을 출력한다. 출력값이 int 범위를 넘어갈 수 있음에 유의하라.</li>\n</ul>\n<hr />\n<h4>0. 전체적인 풀이 요약</h4>\n<ul>\n<li><code>pair&#x3C;int, int></code>를 element로 갖는 우선순위 큐(Priority Queue)를 이용하였다.</li>\n<li><code>대기시간</code>이라고 생각하지말고, 계산이 0분에 시작했다고 했을 때, 해당 사람이 <code>계산을 끝마치는 시간</code>이라고 생각하면 풀이가 훨씬 편해진다.</li>\n<li>문제를 크게 <strong>두 부분으로 나누어서</strong> 풀이하였다.\n<ol>\n<li><strong>손님들의 입장 (줄 세우기):</strong> 계산대로 들어갈 때에는 <strong>대기시간이 짧은</strong>, 대기시간이 같다면 <strong>계산대 번호가 작은</strong> 계산대로 들어가는 것이 원칙이므로, 처음 우선순위 큐를 선언할 때 <code>greater&#x3C;pair&#x3C;int, int>></code>를 사용하면 된다. 물론 pair의 순서는 <code>(대기시간, 계산대번호)</code>순이다.</li>\n<li><strong>손님들의 퇴장(출력 결과값 구하기):</strong> 계산대에서 나올 때는 <strong>대기시간이 짧은</strong>, 대기시간이 같다면 <strong>계산대번호가 큰</strong> 계산대에서 먼저 나온다. 따라서, 우선순위 큐에 우리가 직접 만든 Custom Compare를 넣어주어야 한다.</li>\n</ol>\n</li>\n</ul>\n<h4>1. 손님들 입장시키기 (줄 세우기)</h4>\n<ul>\n<li>\n<p>우선, <code>vector</code>를 이용하여 계산대를 표현하자. 계산대 앞에 선 줄은 각각 <code>queue</code>로 표현된다. 즉, vector 한칸 한칸마다 queue가 들어가 있는 것이다.<br>\n<code>vector&#x3C;queue&#x3C;pair&#x3C;int, int>>> line(K);</code></p>\n</li>\n<li>\n<p>또한, 다음 손님이 들어갈 계산대를 구하기 위한 최소 힙을 구현해준다.<br>\n<code>priority_queue&#x3C;pair&#x3C;int, int>, vector&#x3C;pair&#x3C;int, int>>, greater&#x3C;pair&#x3C;int, int>>> enter_pq;</code></p>\n</li>\n<li>\n<p>각 계산대에 한 사람씩 줄을 일단 세운다. 여기서, 계산대의 개수가 사람 수보다 많다면 예외처리 해준다.</p>\n</li>\n<li>\n<p><code>i번 계산대 줄</code>의 첫 사람의 정보는 <code>(대기시간, 회원번호)</code>로 넣어주고,<br>\n최소 힙에 넣을 때는 <code>(대기시간, 줄 서있는 계산대번호)</code>를 넣어준다.</p>\n<deckgo-highlight-code language=\"cpp\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">int main()\r\n{\r\n  int N, K;\r\n  int id, w;\r\n  bool many_cashier = false;\r\n  long long result = 0;\r\n  scanf(&quot;%d %d&quot;, &amp;N, &amp;K);\r\n\r\n  vector&lt;queue&lt;pair&lt;int, int&gt;&gt;&gt; line(K);\r\n  priority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int, int&gt;&gt;, greater&lt;pair&lt;int, int&gt;&gt;&gt; enter_pq;\r\n\r\n  // 계산대의 개수만큼 줄을 세운다.\r\n  for (int i = 0; i &lt; K; i++)\r\n  {\r\n      //계산대가 손님 수보다 많은 경우 예외처리\r\n      if (i &gt;= N)\r\n      {\r\n          many_cashier = true;\r\n          break;\r\n      }\r\n\r\n      scanf(&quot;%d %d&quot;, &amp;id, &amp;w);\r\n      line[i].push(make_pair(w, id));\r\n      enter_pq.push(make_pair(w, i));\r\n  }</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br />\n<ul>\n<li>만약, <strong><code>손님 수 > 계산대 수</code>(<code>many_cashier == false</code>)</strong> 라면, <code>K+1</code>번째 손님부터 다시 줄 세우기 시작.</li>\n<li>다음 손님이 줄을 서게 될 계산대는 <code>enter_pq</code>의 <code>top</code>에 있는 손님이 줄 서고 있는 계산대이다. 또한, 다음 손님이 계산을 끝마치게 될 시간은 <strong><code>그 계산대의 앞에 있는 사람이 계산을 끝마치는 시간 + 자신의 계산시간</code></strong> 이므로, waitingTime을 그렇게 구한다.<br>\n<code>nextLine = enter_pq.top().second;</code><br>\n<code>waitingTime = enter_pq.top().first + w;</code></li>\n<li>이렇게 구해놓은 다음 손님의 정보를 가지고 이 손님을 nextLine번째 계산대에 줄을 세운다. 또, <code>enter_pq.top()</code>에 있던 손님은 계산을 마친것으로 간주하므로 <code>enter_pq.pop()</code>을 한 번 해주고, 이번에 새로 들어갈 손님을 <code>enter_pq</code>에 <code>push</code>해준다.</li>\n<li>여기까지 하면 모든 사람들에 대한 각자 자기에게 맞는 계산대에 줄 세우기가 완료된다.</li>\n</ul>\n<deckgo-highlight-code language=\"cpp\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">if (many_cashier == false)\r\n{\r\n    for (int i = K; i &lt; N; i++)\r\n    {\r\n        scanf(&quot;%d %d&quot;, &amp;id, &amp;w);\r\n        int nextLine, waitingTime;\r\n\r\n        nextLine = enter_pq.top().second;\r\n        waitingTime = enter_pq.top().first + w;\r\n\r\n        line[nextLine].push(make_pair(waitingTime, id));\r\n        enter_pq.pop();\r\n        enter_pq.push(make_pair(waitingTime, nextLine));\r\n    }\r\n}</code>\n        </deckgo-highlight-code>\n<br />\n<h4>2. 손님들 퇴장시키기 (출력 결과값 구하기)</h4>\n<ul>\n<li>우선, 손님들을 퇴장시키기 위한 정렬(조건은 0-2번 참고)은 STL에서 지원해주지 않으므로 직접 만들어 써야한다.</li>\n<li>이 정렬을 적용한 새로운 우선순위 큐 <code>result_pq</code>를 만들어주자.<br>\n<code>priority_queue&#x3C;pair&#x3C;int, int>, vector&#x3C;pair&#x3C;int, int>>, compare> result_pq;</code></li>\n</ul>\n<deckgo-highlight-code language=\"cpp\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">struct compare\r\n{\r\n    //연산자 오버로딩\r\n    bool operator()(pair&lt;int, int&gt; &amp;a, pair&lt;int, int&gt; &amp;b)\r\n    {\r\n        if (a.first == b.first)\r\n        {\r\n            return a.second &lt; b.second;\r\n        }\r\n        else\r\n            return a.first &gt; b.first;\r\n    }\r\n};</code>\n        </deckgo-highlight-code>\n<br />\n<ul>\n<li>이제 각 계산대 줄의 맨 앞 사람들을 결과 우선순위 큐(result_pq)에 넣어주자. 결과 큐에 넣어줄 때는<br>\n(계산 끝마치는 시간, 계산대번호)의 쌍으로 넣어준다. 마찬가지로 계산대 수가 손님 수보다 더 많으면 예외처리.</li>\n</ul>\n<deckgo-highlight-code language=\"cpp\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">for (int i = 0; i &lt; K; i++)\r\n    {\r\n        //계산대가 손님 수보다 더 많은 경우 예외처리\r\n        if (i &gt;= N)\r\n            break;\r\n\r\n        result_pq.push(make_pair(line[i].front().first, i));\r\n    }</code>\n        </deckgo-highlight-code>\n<br />\n<ul>\n<li>이제 결과값을 구하기 위해 1부터 N까지 for문을 돌린다.</li>\n<li><code>result_pq.top().second</code>에 저장된 계산대 번호와, 그 계산대의 줄 맨 앞에 있는 사람의 회원번호를 알아낸다.<br>\n<code>lineNum = result_pq.top().second;</code><br>\n<code>customerId = line[lineNum].front().second;</code></li>\n<li>이제 <code>result_pq</code>의 맨 앞에 있는 사람을 pop하고, 해당 계산대의 줄에서도 pop한다.</li>\n<li>해당 계산대의 그 다음 사람을 <code>result_pq</code>에 넣어야하므로, 해당 계산대가 비어있지 않은 경우라면 다시 <code>result_pq</code>에 push한다.</li>\n</ul>\n<deckgo-highlight-code language=\"cpp\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">for (int i = 1; i &lt;= N; i++)\r\n{\r\n    int lineNum, customerId;\r\n    lineNum = result_pq.top().second;\r\n    customerId = line[lineNum].front().second;\r\n\r\n    result += (long long)i * (long long)customerId;\r\n\r\n    result_pq.pop();\r\n    line[lineNum].pop();\r\n\r\n    //해당 계산대가 비어있지 않은 경우에만 다시 result_pq에 push한다.\r\n    if (!line[lineNum].empty())\r\n    {\r\n        result_pq.push(make_pair(line[lineNum].front().first, lineNum));\r\n    }\r\n}</code>\n        </deckgo-highlight-code>\n<br />\n<h4>3. 전체 소스코드</h4>\n<deckgo-highlight-code language=\"cpp\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">#include &lt;iostream&gt;\r\n#include &lt;queue&gt;\r\n#include &lt;vector&gt;\r\n#include &lt;algorithm&gt;\r\nusing namespace std;\r\n\r\nstruct compare\r\n{\r\n    //연산자 오버로딩\r\n    bool operator()(pair&lt;int, int&gt; &amp;a, pair&lt;int, int&gt; &amp;b)\r\n    {\r\n        if (a.first == b.first)\r\n        {\r\n            return a.second &lt; b.second;\r\n        }\r\n        else\r\n            return a.first &gt; b.first;\r\n    }\r\n};\r\n\r\nint main()\r\n{\r\n    int N, K;\r\n    int id, w;\r\n    bool many_cashier = false;\r\n    long long result = 0;\r\n    scanf(&quot;%d %d&quot;, &amp;N, &amp;K);\r\n\r\n    vector&lt;queue&lt;pair&lt;int, int&gt;&gt;&gt; line(K);\r\n    priority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int, int&gt;&gt;, greater&lt;pair&lt;int, int&gt;&gt;&gt; enter_pq;\r\n\r\n    // 계산대의 개수만큼 줄을 세운다.\r\n    for (int i = 0; i &lt; K; i++)\r\n    {\r\n        //계산대가 손님 수보다 많은 경우 예외처리\r\n        if (i &gt;= N)\r\n        {\r\n            many_cashier = true;\r\n            break;\r\n        }\r\n\r\n        scanf(&quot;%d %d&quot;, &amp;id, &amp;w);\r\n        line[i].push(make_pair(w, id));\r\n        enter_pq.push(make_pair(w, i));\r\n    }\r\n\r\n    //만약 계산대가 손님 수보다 적다면\r\n    // K+1번째 손님부터 다시 줄세우기 시작\r\n    //해당 계산대의 대기시간을 업데이트, 기존 손님 out, 새로운 손님 in\r\n    if (many_cashier == false)\r\n    {\r\n        for (int i = K; i &lt; N; i++)\r\n        {\r\n            scanf(&quot;%d %d&quot;, &amp;id, &amp;w);\r\n            int nextLine, waitingTime;\r\n\r\n            nextLine = enter_pq.top().second;\r\n            waitingTime = enter_pq.top().first + w;\r\n\r\n            line[nextLine].push(make_pair(waitingTime, id));\r\n            enter_pq.pop();\r\n            enter_pq.push(make_pair(waitingTime, nextLine));\r\n        }\r\n    }\r\n\r\n    //줄세웠던 것을 다시 결과 큐로 넣는 작업\r\n    priority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int, int&gt;&gt;, compare&gt; result_pq;\r\n    for (int i = 0; i &lt; K; i++)\r\n    {\r\n        //계산대가 손님 수보다 더 많은 경우 예외처리\r\n        if (i &gt;= N)\r\n            break;\r\n\r\n        result_pq.push(make_pair(line[i].front().first, i));\r\n    }\r\n\r\n    for (int i = 1; i &lt;= N; i++)\r\n    {\r\n        int lineNum, customerId;\r\n        lineNum = result_pq.top().second;\r\n        customerId = line[lineNum].front().second;\r\n\r\n        result += (long long)i * (long long)customerId;\r\n\r\n        result_pq.pop();\r\n        line[lineNum].pop();\r\n\r\n        //해당 계산대가 비어있지 않은 경우에만 다시 result_pq에 push한다.\r\n        if (!line[lineNum].empty())\r\n        {\r\n            result_pq.push(make_pair(line[lineNum].front().first, lineNum));\r\n        }\r\n    }\r\n\r\n    printf(&quot;%lld\\n&quot;, result);\r\n}</code>\n        </deckgo-highlight-code>\n<br />\n<h4>4. 배운 것</h4>\n<ol>\n<li><strong>vector의 원소로 queue를 넣을 수 있다는 것</strong>... C로만 문제를 풀어오다가 신세계를 만난 기분이다.</li>\n<li><strong>pair를 활용하여 문제를 풀면 상당히 편리</strong>하다는 것. 이 역시 C로만 문제를 풀어오다가(이 때는 구조체를 사용) 고민이 싹 해결된 것 같은 느낌이었다.</li>\n</ol>\n<p>cf) 참고: <a href=\"https://everenew.tistory.com/106\">https://everenew.tistory.com/106</a></p>","title":"[C++] BOJ #17612 쇼핑몰","date":"2022. 02. 22","next":{"frontmatter":{"path":"/boj11399","title":"[C++] BOJ #11399 ATM"}},"previous":null}},
    "staticQueryHashes": ["3649515864"]}