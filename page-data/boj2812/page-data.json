{
    "componentChunkName": "component---src-templates-prob-solving-template-js",
    "path": "/boj2812",
    "result": {"pageContext":{"html":"<h2>문제</h2>\n<p>N자리 숫자가 주어졌을 때, 여기서 숫자 K개를 지워서 얻을 수 있는 가장 큰 수를 구하는 프로그램을 작성하시오.</p>\n<h3>입력</h3>\n<ul>\n<li>\n<p>첫째 줄에 N과 K가 주어진다. (1 ≤ K &#x3C; N ≤ 500,000)</p>\n</li>\n<li>\n<p>둘째 줄에 N자리 숫자가 주어진다. 이 수는 0으로 시작하지 않는다.</p>\n</li>\n</ul>\n<h3>출력</h3>\n<ul>\n<li>입력으로 주어진 숫자에서 K개를 지웠을 때 얻을 수 있는 가장 큰 수를 출력한다.</li>\n</ul>\n<hr />\n<h4>1. 해결방법 및 소스코드</h4>\n<ul>\n<li>큐(Queue)와 스택(Stack)을 활용하였다.</li>\n<li>우선, N이 최대 500,000인데 5십만자리 수는 기본적인 자료형으로 표현할 수 없으므로 수를 <strong>문자열</strong>로 받는다.<br>\n<code>char</code>형으로 받은 수를 <code>x</code>라고 하면 <code>x-'0'</code>으로 정수로 변환할 수 있으므로 변환한 정수를 큐에 넣는다.</li>\n<li>최종적으로 다룰 결과는 result라는 스택에서 완성된다. result스택에 우리가 받은 수(큐)에서 가장 앞자리수<br>\n(<code>number.front()</code>)를 추출(<code>pop</code>)하여 스택에 쌓음으로서 본격적인 풀이를 할 준비가 완료된다.</li>\n</ul>\n<deckgo-highlight-code language=\"cpp\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">#include &lt;iostream&gt;\r\n#include &lt;stack&gt;\r\n#include &lt;queue&gt;\r\n#include &lt;vector&gt;\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n    int N, K;\r\n    int resultsize;\r\n\r\n    stack&lt;int&gt; result;\r\n    queue&lt;int&gt; number;\r\n\r\n    scanf(&quot;%d %d&quot;, &amp;N, &amp;K);\r\n\r\n    char numstring[N + 1];\r\n    scanf(&quot;%s&quot;, numstring);\r\n\r\n    int print_result[N];\r\n\r\n    for (int i = 0; i &lt; N; i++)\r\n    {\r\n        number.push(numstring[i] - &#39;0&#39;);\r\n    }\r\n\r\n    //스택에 N자리 숫자의 맨 앞자리를 넣어주며 시작\r\n    result.push(number.front());\r\n    number.pop();</code>\n        </deckgo-highlight-code>\n<br />\n<ul>\n<li>큐에서 한 번 pop을 해주었기 때문에 큐의 맨 앞에는 N자리 숫자의 두번째 숫자가 와 있다.</li>\n<li>이제 number 큐에서 하나씩 pop을 해주면서 큐가 empty될 때까지 아래의 연산을 반복하면 된다.\n<ol>\n<li><code>number.front() > result.top()</code>인 경우에는 result 스택에서 <code>number.front()</code>보다 작은 값이 없을 때까지 result 스택을 pop해준다.\r\n당연히 pop 한번에 K도 하나씩 감소시킨다. 이 때 반복적인 pop의 조건은 <strong>result스택이 비어있으면 안되고</strong>, <strong>K > 0</strong>임이 함께 보장되어야한다.</li>\n<li>위 1번 조건에 만족하지 않거나 1번 조건에서의 반복적인 pop을 마무리해준 후, 그때서야 <code>number.front()</code>를 result 스택에 push 할 수 있게된다.</li>\n<li>위 1, 2번 조건을 모두 마쳤으나 K가 아직 남아있을 수 있다. 이럴 경우에는 남은 K만큼 result 스택을 pop 해주고 K를 완전 소모시킨다.</li>\n</ol>\n</li>\n</ul>\n<deckgo-highlight-code language=\"cpp\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">    // N자리 숫자의 2번째자리 숫자부터 검사 시작\r\n    while (!number.empty())\r\n    {\r\n        int numberfront = number.front();\r\n        // printf(&quot;numberfront: %d\\n&quot;, numberfront);\r\n\r\n        if (numberfront &gt; result.top())\r\n        {\r\n            while (!result.empty() &amp;&amp; (numberfront &gt; result.top()) &amp;&amp; K &gt; 0)\r\n            {\r\n                // printf(&quot;%d를 pop합니다!\\n&quot;, result.top());\r\n                result.pop();\r\n                K--;\r\n            }\r\n        }\r\n\r\n        // printf(&quot;%d를 push합니다!\\n&quot;, numberfront);\r\n        result.push(numberfront);\r\n        number.pop();\r\n    }\r\n\r\n    //그럼에도 남은 K가 있다면 싹다 정리\r\n    while (K &gt; 0)\r\n    {\r\n        result.pop();\r\n        K--;\r\n    }</code>\n        </deckgo-highlight-code>\n<br />\n<ul>\n<li>이제 result 스택의 사이즈를 알아낸 후, result 스택에서 남아있는 결과값을 프린트 해 줄 <code>print_result</code> 배열에 result 스택의 수를 옮겨담고, 결과를 출력한다.</li>\n</ul>\n<deckgo-highlight-code language=\"cpp\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">    resultsize = result.size();\r\n    for (int i = result.size() - 1; i &gt;= 0; i--)\r\n    {\r\n        // printf(&quot;인덱스 %d 에 %d 저장\\n&quot;, i, result.top());\r\n        print_result[i] = result.top();\r\n        result.pop();\r\n    }\r\n\r\n    for (int i = 0; i &lt; resultsize; i++)\r\n    {\r\n        printf(&quot;%d&quot;, print_result[i]);\r\n    }\r\n\r\n    printf(&quot;\\n&quot;);\r\n}</code>\n        </deckgo-highlight-code>\n<br />\n<h4>2. 전체 소스코드</h4>\n<deckgo-highlight-code language=\"cpp\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">#include &lt;iostream&gt;\r\n#include &lt;stack&gt;\r\n#include &lt;queue&gt;\r\n#include &lt;vector&gt;\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n    int N, K;\r\n    int resultsize;\r\n\r\n    stack&lt;int&gt; result;\r\n    queue&lt;int&gt; number;\r\n\r\n    scanf(&quot;%d %d&quot;, &amp;N, &amp;K);\r\n\r\n    char numstring[N + 1];\r\n    scanf(&quot;%s&quot;, numstring);\r\n\r\n    int print_result[N];\r\n\r\n    for (int i = 0; i &lt; N; i++)\r\n    {\r\n        number.push(numstring[i] - &#39;0&#39;);\r\n    }\r\n\r\n    //스택에 N자리 숫자의 맨 앞자리를 넣어주며 시작\r\n    result.push(number.front());\r\n    number.pop();\r\n\r\n    // N자리 숫자의 2번째자리 숫자부터 검사 시작\r\n    while (!number.empty())\r\n    {\r\n        int numberfront = number.front();\r\n        // printf(&quot;numberfront: %d\\n&quot;, numberfront);\r\n\r\n        if (numberfront &gt; result.top())\r\n        {\r\n            while (!result.empty() &amp;&amp; (numberfront &gt; result.top()) &amp;&amp; K &gt; 0)\r\n            {\r\n                // printf(&quot;%d를 pop합니다!\\n&quot;, result.top());\r\n                result.pop();\r\n                K--;\r\n            }\r\n        }\r\n\r\n        // printf(&quot;%d를 push합니다!\\n&quot;, numberfront);\r\n        result.push(numberfront);\r\n        number.pop();\r\n    }\r\n\r\n    //그럼에도 남은 K가 있다면 싹다 정리\r\n    while (K &gt; 0)\r\n    {\r\n        result.pop();\r\n        K--;\r\n    }\r\n\r\n    resultsize = result.size();\r\n    for (int i = result.size() - 1; i &gt;= 0; i--)\r\n    {\r\n        // printf(&quot;인덱스 %d 에 %d 저장\\n&quot;, i, result.top());\r\n        print_result[i] = result.top();\r\n        result.pop();\r\n    }\r\n\r\n    for (int i = 0; i &lt; resultsize; i++)\r\n    {\r\n        printf(&quot;%d&quot;, print_result[i]);\r\n    }\r\n\r\n    printf(&quot;\\n&quot;);\r\n}</code>\n        </deckgo-highlight-code>","title":"[C++] BOJ #2812 크게 만들기","date":"2022. 02. 24","next":{"frontmatter":{"path":"/boj1931","title":"[C++] BOJ #1931 회의실 배정"}},"previous":null}},
    "staticQueryHashes": ["3649515864"]}