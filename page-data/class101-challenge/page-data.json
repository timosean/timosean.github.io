{
    "componentChunkName": "component---src-templates-devlog-template-js",
    "path": "/class101-challenge",
    "result": {"pageContext":{"html":"<h2>💻CLASS101 프론트엔드 클론코딩 챌린지</h2>\n<p>여느 때처럼 인스타그램 스토리를 훑어보던 중, 스토리들 사이에 낀 광고 하나를 보게되었다.<br/>\r\n무심코 스와이프했다가 \"프론트엔드 챌린지\" 라고 쓰여있었던 것 같아 얼른 다시 그 광고로 돌아왔다.<br/>\r\n<br/>\r\n마침 이 Todylog를 완성하고 다음으로 무엇을 할지 고민하고 있던 차에 아주 좋은 챌린지 기회가 찾아왔던 것이다!\r\n참가비도 1만원으로 부담 없었고, 이마저도 제출만 한다면 돌려준다니 아주 열정적인 10일을 보낼 기회가 찾아왔다.<br/>\r\n(게다가 상위 10% 안에 들면 개발자님들의 코드리뷰와(10만원보단 코드리뷰 받지 않을까싶다) 개발자 풀에 초대해주신다니 열심히 참여할 계기도 충분했다.)<br/>\r\n<br/>\r\n고민할 필요도 없이 바로 신청했고, 그 후기를 아래에 남기겠다 :-)</p>\n<hr/>\n<h3>🛠 개발 과정에서 고민했던 것들</h3>\n<h4>(1) TypeScript × Styled-Components</h4>\n<p><strong>[설치]</strong><br>\nJavaScript × React로 Styled-Components를 설치할 때와 똑같이 설치해주었는데 자꾸 오류가 났다.<br>\n찾아보니 TypeScript로 Styled-Components를 설치할 때는 다음과 같이 설치해야 한다고 한다.</p>\n<deckgo-highlight-code  terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">yarn add styled-components @types/styled-components</code>\n        </deckgo-highlight-code>\n<p><strong>[props 전달]</strong><br>\n이전에도 Styled-Components 를 많이 써왔지만 TypeScript 자체가 처음이기 때문에 props 전달하는 문법이 따로 있다는 것을 몰랐다.\r\nStyled-Component에게 <ComponentName propsName={propsValue} />와 같이 그냥 props를 전달하였더니 다음과 같은 오류가 발생했다.</p>\n<blockquote>\n<p><strong>이 호출과 일치하는 오버로드가 없습니다</strong></p>\n</blockquote>\n<p>Styled-Components에게 props를 전달하려면 Styled-Component를 선언할 때 다음과 같이 작성해주어야 했다.\r\n(단일 props일 경우에 아래와 같이 작성한다. 전달할 props가 많으면 interface를 작성해야 한다고 한다.)</p>\n<deckgo-highlight-code  terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">const ComponentName = styled.div &lt;{ propsName: 해당Type } &gt;`\r\n  style here\r\n`</code>\n        </deckgo-highlight-code>\n<p>예를 들면 다음과 같다.</p>\n<deckgo-highlight-code  terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">const StyledNavbar = styled.div &lt;{ isOpened: boolean } &gt;`\r\n  style here\r\n `</code>\n        </deckgo-highlight-code>\n<br/>\n<h4>(2) 테두리를 없앴는데 테두리가 생긴다..</h4>\n<p>CLASS101 사이트의 검색창을 누르면 다음과 같이 검색창 테두리에 아무런 변화가 없다.<br>\n<img alt=\"CLASS101 검색창\" src=\"https://raw.githubusercontent.com/timosean/timosean.github.io/0fdb210c89106f7cd1498ce35e19235bdd9d11ee/postimages/prob2.png\"/></p>\n<p>하지만 분명 <code>border: none;</code>을 주었는데도 불구하고 검색창을 클릭하면 검은 테두리가 활성화되었다.</p>\n<p>이는 input 태그의 focus 상태에서의 스타일링에서 아웃라인을 없애주면 해결이 된다.\r\n나는 styled-components를 사용하였기 때문에 컴포넌트 내부에서 다음과 같이 스타일링 해주었다.</p>\n<deckgo-highlight-code  terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">const StyledInput = styled.input &lt;{ isOpened: boolean } &gt;`\r\n\r\n  many codes here...\r\n\r\n  &amp;:focus {\r\n    outline: none;\r\n  }\r\n`</code>\n        </deckgo-highlight-code>\n<br/>\n<h4>(3) flexbox 속의 개별 요소 하나를 스타일링하기</h4>\n<p>CLASS101 사이트 상단 내비게이션 바에 '1월 가입혜택'을 보면 빨간 뱃지가 우상단에 달려있다.</p>\n<p align=\"center\">\r\n<img alt=\"1월 가입혜택 이미지\" src=\"https://raw.githubusercontent.com/timosean/timosean.github.io/0fdb210c89106f7cd1498ce35e19235bdd9d11ee/postimages/prob3.png\">\r\n</p>\n<p>하지만 내가 빨간 뱃지를 만들고 배치했을 때에는 계속 전체 높이의 중간에만 위치되었다.<br>\n아마 flexbox의 <code>align-items: center;</code> 속성 때문인 것 같았다.<br>\n그렇게 flexbox의 개별 아이템을 따로 포지셔닝 할 수 있는 방법을 찾다가 다음과 같은 속성을 발견했다.<br>\n바로 <code>align-self</code> 속성이다.<br>\n<br/></p>\n<p><code>align-self</code> 속성의 기본값은 <code>auto</code>로, <code>align-items</code>의 값을 그대로 물려받는다.<br>\n따라서, 특정 아이템의 정렬을 따로 정하고 싶다면, <code>align-self: flex-start;</code>와 같이 따로 명시해주어야 한다.\r\n이렇게 해서 빨간 뱃지를 위의 그림처럼 맨 위로 올릴 수 있게 되었다.</p>\n<p>마찬가지로, <code>justify-self</code> 속성도 있다.</p>\n<br/>\n<h4>(4) TypeScript 에러: Undefined 일 수도 있습니다..?</h4>\n<p>'전체 카테고리' 메뉴를 hover 했을 때 나오는 드롭다운 리스트에서의 각각의 메뉴를 hover 했을 때,<br>\n해당 메뉴의 세부 메뉴 리스트가 옆에 등장해야 한다. (아래 그림과 같다.)</p>\n<p align=\"center\"> \r\n<img alt=\"dropdown_img\" src=\"https://raw.githubusercontent.com/timosean/timosean.github.io/0fdb210c89106f7cd1498ce35e19235bdd9d11ee/postimages/prob4.png\">\r\n</p>\n<p>이를 구현하기 위해서, 드롭다운 리스트에 필요한 정보를 다음과 같이 객체 배열로 만들었다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">const CategoryMenus = [\r\n  {\r\n    id: 1,\r\n    name: &quot;디지털 드로잉&quot;,\r\n    to: &quot;https://class101.net/search?category=604f1c9756c3676f1ed0030e&quot;,\r\n    submenus: [\r\n      {\r\n        id: 11,\r\n        name: &quot;일러스트&quot;,\r\n        to: &quot;https://class101.net/search?category=613070fa5b76158cac88344a&quot;,\r\n      },\r\n      {\r\n        id: 12,\r\n        name: &quot;컨셉아트&quot;,\r\n        to: &quot;https://class101.net/search?category=6114891dfe1ca7f7b31b4a23&quot;,\r\n      },\r\n      {\r\n        id: 13,\r\n        name: &quot;캐릭터 드로잉&quot;,\r\n        to: &quot;https://class101.net/search?category=613070fa5b76158cac88344b&quot;,\r\n      },\r\n      ...more objects...\r\n    ],\r\n  },\r\n  {\r\n    id: 2,\r\n    name: &quot;드로잉&quot;,\r\n    to: &quot;https://class101.net/search?category=604f1c9756c3676f1ed00304&quot;,\r\n    submenus: [\r\n      {\r\n        id: 20,\r\n        name: &quot;펜 · 연필&quot;,\r\n        to: &quot;https://class101.net/search?category=604f1c9756c3676f1ed00305&quot;,\r\n      },\r\n      {\r\n        id: 21,\r\n        name: &quot;마카&quot;,\r\n        to: &quot;https://class101.net/search?category=604f1c9756c3676f1ed00306&quot;,\r\n      },\r\n      {\r\n        id: 22,\r\n        name: &quot;색연필&quot;,\r\n        to: &quot;https://class101.net/search?category=604f1c9756c3676f1ed00307&quot;,\r\n      },\r\n      ...more objects...\r\n    ],\r\n  },\r\n\r\n  ...And more objects...</code>\n        </deckgo-highlight-code>\n<p>Array.map을 이용하여 '전체 카테고리'를 hover했을 때 나타나는 드롭다운 리스트를 만들고,<br>\n여기에서 hover한 메뉴 이름을 useState로 저장해놓고, 위의 객체 배열에서 name이 state에 저장되어 있는 이름과 같은 객체를 찾아서 submenus를 다시 map 해주는 식으로 구현했다.<br>\n어차피 state에 저장되어있는 이름과 name값이 같은 객체는 한 개 뿐이므로, Array.find 메소드 (주어진 판별 함수를 만족하는 첫 번째 요소를 반환) 를 사용하여 다음과 같이 구현하려고 했다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">const [categoryName, setCategoryName] = useState(&quot;&quot;);\r\n\r\n//전체 카테고리 드롭다운 리스트\r\n//여기에서 hover한 메뉴의 이름이 onMouseEnter 이벤트를 통해 categoryName에 저장된다.\r\n     ...code...\r\n\r\n//우측에 나타나는 서브메뉴 리스트\r\n&lt;DropdownSection&gt;\r\n     &lt;SectionTitle element=&quot;h2&quot;&gt;{categoryName}&lt;/SectionTitle&gt;\r\n          {CategoryMenus.find(\r\n               (menu) =&gt; menu.name === categoryName\r\n               ).submenus.map((submenu) =&gt; (\r\n               &lt;AdditionalSectionItem\r\n                    key={submenu.id}\r\n                    to={submenu.to}\r\n                    className=&quot;sectionItem&quot;\r\n               &gt;\r\n                    {submenu.name}\r\n                  &lt;/AdditionalSectionItem&gt;\r\n          ))}\r\n&lt;/DropdownSection&gt;</code>\n        </deckgo-highlight-code>\n<p>그러나 다음과 같은 에러가 발생했다.</p>\n<blockquote>\n<p><strong>Object is possibly 'undefined'</strong></p>\n</blockquote>\n<p>이것은 타입스크립트를 사용해서 발생한 문제로, 타입스크립트가 값이 undefined 일 수도 있다고 판단한 요소 뒤에 옵셔널 체이닝 연산자 <code>?.</code>를 추가하면 정상적으로 출력되는 것을 확인할 수 있다.<br>\n위 코드에서 <code>CategoryMenus.find((menu) => menu.name === categoryName)?.submenus.map ~~</code><br>\n이렇게 고쳐주었다.</p>\n<br/>\n<h4>(5) hover도 좋지만 MouseEvent를 적극 활용하자</h4>\n<p>이 Todylog를 개발하면서 마우스 관련 이벤트는 css <code>:hover</code>만으로 해결되는 경우가 다였어서 <code>:hover</code>밖에 생각이 안났었는데 마우스를 올리거나 뗐을 때 등등 마우스 관련 수많은 event들이 있다는 것을 생각해냈다😂 (너무 당연한건데... 더 열심히 해야겠음)<br>\n<code>onMouseEnter</code>와 <code>onMouseLeave</code> 이벤트가 일어날 때 isMenuOpened라는 state의 상태를 바꿔주는 식으로 구현했다. 아래는 예시코드이다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">const [isMenuOpened, setMenuOpened] = useState(false);\r\n\r\n&lt;Button onMouseEnter={() =&gt; setMenuOpened(true)} onMouseLeave={() =&gt; setMenuOpened(false)}&gt;</code>\n        </deckgo-highlight-code>\n<p>위 (4)번의 그림에서 보듯이 '전체 카테고리'에 마우스를 올리면 드롭다운 리스트가 나타나고, 이 리스트에서 마우스를 바깥으로 옮기면 다시 리스트가 사라진다.\r\n처음에는 단순하게 '전체 카테고리' 버튼에 <code>onMouseEnter</code>와 <code>onMouseLeave</code>를 둘 다 걸어주었는데, 이렇게 했더니 (너무 당연하지만)\r\n드롭다운 리스트가 나타나고, 사용자가 드롭다운 메뉴에 마우스를 올리려고 하는 순간 마우스가 '전체 카테고리' 버튼을 벗어나게 되면서 드롭다운 리스트가 사라져버렸다.\r\n(약 올리는 것도 아니고🤣)</p>\n<p>이런 문제를 개선하기 위해서 '전체 카테고리' 버튼에는 <code>onMouseLeave</code> 이벤트를 걸어주지 않고, 드롭다운 리스트에 <code>onMouseLeave</code> 이벤트를 걸어주었다.</p>\n<br/>\n<h4>(6) position: relative / absolute 활용하기</h4>\n<p>위 (4)번의 그림처럼 전체 카테고리 드롭다운의 메뉴에 마우스를 올리면 해당 메뉴의 세부메뉴 리스트가 옆에 등장한다.<br>\n이걸 구현하는 데에 있어서 처음에는 다음과 같이 구현했었다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">&lt;MainDropDownList onMouseEnter={() =&gt; setMenuOpened(true)} onMouseLeave={() =&gt; setMenuOpened(false)}&gt;\r\n  &lt;SubMenu onMouseEnter={() =&gt; setSubmenuOpened(true)}&gt;\r\n&lt;MainDropDownList /&gt;\r\n\r\n&lt;SubMenuList onMouseLeave={() =&gt; setSubmenuOpened(false)}/&gt;</code>\n        </deckgo-highlight-code>\n<p>여기에서 문제는, MainDropDownList에서 마우스가 떠나면 서브메뉴 리스트도 화면에서 사라져야 하는데, MainDropDownList만 화면에서 사라지고,\r\n서브메뉴 리스트는 화면에 남아 둥둥 떠있게 되었다.<br>\nMainDropDownList에서 마우스가 떠날 때 서브메뉴 리스트도 없어지게 만드려면 서브메뉴 리스트를 MainDropDownList의 자식으로 넣어야되겠다는\r\n생각이 들었다.</p>\n<p>마침 MainDropDownList의 position 속성도 <code>position: relative;</code> 였어서, 서브메뉴 리스트의 포지션을 <code>position: absolute;</code>를 주고,\r\n부모인 MainDropDownList에 상대적으로 <code>top</code>속성과 <code>left</code>속성을 주어 위치를 조절하면 되겠다는 생각이 들었고, 이렇게해서 해결할 수 있게 되었다.</p>\n<br/>\n<h4>(7) document.getElementById 활용하기</h4>\n<p>아래의 그림처럼 전체 카테고리 드롭다운에서 한 카테고리에 마우스를 올린 후 해당 세부메뉴 리스트로 마우스를 옮기게 되면, 전체 카테고리 드롭다운에서 선택된 카테고리의 글자가 진해지면서 오른편에 화살표가 나타나게 된다.</p>\n<p align=\"center\"> \r\n<img alt=\"dropdown_img\" src=\"https://raw.githubusercontent.com/timosean/timosean.github.io/484ba5500915f93798a38dba3e083e521a3e5eac/postimages/prob7.png\">\r\n</p>\n<p>그래서 생각한 로직은, 일단 각 카테고리의 아이콘에 id를 해당 카테고리 이름으로 주고, 세부메뉴 리스트에 <code>onMouseEnter</code> 시에 <code>document.getElementById</code>로 해당\r\n아이콘을 선택한 다음, <code>style.visibility=\"visible\"</code>을 주는 것이다.<br>\n(물론, 처음에 아이콘의 스타일을 정의할 때 <code>visibility</code>는 <code>hidden</code>으로 주었다.)<br>\n그리고, 당연히 세부메뉴 리스트에 <code>onMouseLeave</code> 시에는 다시 <code>style.visibility=\"hidden\"</code>을 주어야 다른 카테고리를 선택했을 때에 그 카테고리의 화살표만\r\n남아있게 된다.</p>\n<p>마찬가지로, 카테고리 이름을 감싸는 컴포넌트에도 id를 주는데, 아이콘의 id와 공통된 단어가 들어가게 해줌으로써, 함수 하나에서 템플릿 리터럴을 이용하여\r\n해결할 수 있게 했다. (다음의 코드 참고)</p>\n<deckgo-highlight-code  terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">//아이콘 visibility를 조절하는 함수\r\nconst makeIconAppear = (name: string) =&gt; {\r\n  document.getElementById(name).style.visibility = &quot;visible&quot;\r\n  document.getElementById(`link-${name}`).style.fontWeight = &quot;bold&quot;\r\n}\r\nconst makeIconDisappear = (name: string) =&gt; {\r\n  document.getElementById(name).style.visibility = &quot;hidden&quot;\r\n  document.getElementById(`link-${name}`).style.fontWeight = &quot;normal&quot;\r\n}\r\n\r\n//해당 컴포넌트 코드\r\n&lt;DropdownSection&gt;\r\n  &lt;SectionTitle element=&quot;h2&quot;&gt;크리에이티브&lt;/SectionTitle&gt;\r\n  {CategoryMenus.slice(0, 9).map(menu =&gt; (\r\n    &lt;div\r\n      onMouseEnter={() =&gt; {\r\n        setCategoryName(`${menu.name}`)\r\n        setSubmenuHover(true)\r\n      }}\r\n      key={menu.id}\r\n    &gt;\r\n      &lt;SectionItem className=&quot;sectionItem&quot;&gt;\r\n        &lt;SectionLink href={menu.to} id={`link-${menu.name}`}&gt;\r\n          {menu.name}\r\n        &lt;/SectionLink&gt;\r\n        &lt;RightIcon id={menu.name}&gt;\r\n          &lt;ChevronRightIcon size={12} /&gt;\r\n        &lt;/RightIcon&gt;\r\n      &lt;/SectionItem&gt;\r\n    &lt;/div&gt;\r\n  ))}\r\n&lt;/DropdownSection&gt;</code>\n        </deckgo-highlight-code>\n<br/>\n<h4>(8) class 활용하기 / TypeScript에서 event.target 사용하기 (feat. 타입캐스팅)</h4>\n<p>아래의 그림처럼, Bottom Navigation에서 클릭한(선택한) 부분만 색상이 변하고 나머지는 다 원래의 검정색으로 복구시키는 기능을\r\n구현해야했다. 무척이나 구현해보고 싶었지만 아이디어도 떠오르지 않았고 시도해 본 적도 없는 기능이어서 고민을 많이했다.</p>\n<p align=\"center\"> \r\n<img alt=\"bottomnav_img\" src=\"https://raw.githubusercontent.com/timosean/timosean.github.io/02e467c66274a12eafa99ad5f3cd7ef2f6d5815a/postimages/prob8.png\">\r\n</p>\n<p>그러다가, 클릭된 버튼을 event.target으로 가져와서, 그 버튼에 'isActive'라는 클래스 이름을 부여해주는 식으로 접근해보았다.\r\n물론 해당 버튼의 styled-components의 스타일에는 다음과 같이 isActive 클래스에 글자색을 바꿔주는 식으로 스타일링했다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">const StyledButton = styled.span`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex: 1 1 0%;\r\n  cursor: pointer;\r\n  text-decoration: none;\r\n  color: rgb(26, 26, 26);\r\n\r\n  &amp;.isActive {\r\n    color: rgb(255, 61, 0);\r\n  }\r\n`</code>\n        </deckgo-highlight-code>\n<p>우선, 클릭된 버튼을 event.target 으로 가져와서 클래스이름을 추가로 부여해주는 함수 코드는 다음과 같이 작성하였다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">const addClassName = (e: React.MouseEvent&lt;HTMLElement&gt;): void =&gt; {\r\n  e.target.classList.add(&quot;isActive&quot;)\r\n}</code>\n        </deckgo-highlight-code>\n<p>이렇게 했는데, 타입스크립트에서 다음과 같은 에러가 발생했다.</p>\n<blockquote>\n<p><strong>'EventTarget' 형식에 'classList' 속성이 없습니다</strong></p>\n</blockquote>\n<p>열심히 서칭해본 결과, TypeScript에서는 다음과 같이 <code>as</code>를 사용해서 타입캐스팅을 해주면 오류가 해결된다는 글을 보았다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">  const addClassName = (e: React.MouseEvent&lt;HTMLElement&gt;) : void =&gt; {\r\n    const target = e.target as HTMLSpanElement;\r\n    const {classList} = target;\r\n  }</code>\n        </deckgo-highlight-code>\n<p>그렇게 해서 e.target의 classList를 뽑아내는 것까지 성공하고, 그 이후에 add와 remove 메서드도 사용할 수 있게 되었다.\r\n해당 컴포넌트와 함수 코드는 다음과 같다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">//해당 버튼 컴포넌트 구조\r\nconst StyledButton = styled.span`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex: 1 1 0%;\r\n  cursor: pointer;\r\n  text-decoration: none;\r\n  color: rgb(26, 26, 26);\r\n\r\n  &amp;.isActive {\r\n    color: rgb(255, 61, 0);\r\n  }\r\n`;\r\n\r\n//StyledButton의 자식요소이므로, 버튼의 color 속성을 물려받도록 color: inherit 설정\r\nconst ContentName = styled.div`\r\n  font-size: 9px;\r\n  font-weight: 600;\r\n  color: inherit;\r\n  line-height: 12px;\r\n  letter-spacing: normal;\r\n  margin: 0px;\r\n`;\r\n\r\n//StyledButton의 자식요소이므로, 버튼의 color 속성을 물려받도록 color: inherit 설정\r\nconst IconArea = styled.span`\r\n  color: inherit;\r\n  font-size: 22px;\r\n`;\r\n\r\n//구현 코드\r\n&lt;StyledButton\r\n  onClick={(e) =&gt; {\r\n    setOpened(false);\r\n    addClassName(e);\r\n  }}\r\n&gt;\r\n  &lt;IconArea className=&quot;classBtn&quot;&gt;\r\n    &lt;AiOutlinePlaySquare /&gt;\r\n  &lt;/IconArea&gt;\r\n  &lt;div className=&quot;spacingBox&quot;&gt; &lt;/div&gt;\r\n  &lt;ContentName className=&quot;classBtn&quot;&gt;클래스&lt;/ContentName&gt;\r\n&lt;/StyledButton&gt;\r\n\r\n//클래스 리스트 조작을 위한 함수\r\nconst addClassName = (e: React.MouseEvent&lt;HTMLElement&gt;): void =&gt; {\r\n  //일단 지금 오렌지색으로 변해있는 것의 isActive 클래스를 지우고\r\n  const removeTarget = document.querySelector(&quot;.isActive&quot;);\r\n  removeTarget?.classList.remove(&quot;isActive&quot;);\r\n\r\n  //현재 선택된 버튼에 isActive 클래스를 추가해 오렌지색으로 바꾼다.\r\n  const target = e.target as HTMLSpanElement;\r\n  const { classList } = target;\r\n  classList.add(&quot;isActive&quot;);\r\n};</code>\n        </deckgo-highlight-code>\n<br/>\n<h4>(9) offsetLeft로 왼쪽에서 떨어진 거리 구하기</h4>\n<br/>\n<p align=\"center\"> \r\n<img alt=\"bottomnav_img\" src=\"https://github.com/timosean/timosean.github.io/blob/master/postimages/prob9.png?raw=true\">\r\n</p>\n<p>위에 보이는 그림처럼 전체 카테고리에 마우스를 올리면 밑에 드롭다운 리스트가 나타나는데, 자세히 살펴보니 이 드롭다운 리스트의 <code>margin-left</code>값이 뷰포트 너비(Viewport Width)에 따라\r\n달라졌다. 구체적으로는, '내비게이션 바'의 <code>margin-left</code> 값보다 <code>20px</code> 적다는 것을 알아냈다. (내비게이션 바의 <code>margin-left</code>는 <code>auto</code>였으므로 고정적이지 않았음)<br>\n따라서, 다음과 같이 내비게이션 바의 <code>margin-left</code> 값을 구하고 거기서 <code>20px</code> 뺀 만큼을 드롭다운 리스트의 <code>margin-left</code> 값으로 주었다.</p>\n<deckgo-highlight-code  terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">const navbar = document.getElementById(&quot;navbar&quot;)\r\nconst navLeft = navbar?.offsetLeft\r\n\r\n&lt;CategoryDropdownWrapper style={{ marginLeft: `${navLeft - 20}px` }}&gt;\r\n          ...\r\n&lt;/CategoryDropdownWrapper&gt;</code>\n        </deckgo-highlight-code>\n<br/>\n<h4>(10) 포인터 이벤트의 대상이 되고 싶지 않다면? pointer-events: none;</h4>\n<p>문제가 하나 더 발생했다. 위 코드에서처럼 가장 바깥쪽 span(즉, StyledButton 컴포넌트)에 onClick 이벤트를\r\n준 것을 볼 수 있다. 이렇게 해당 영역을 클릭하면 StyledButton의 color 속성이 바뀌고 그 안의 아이콘과 글자의 color는 inherit이므로 저절로 바뀌도록\r\n해놓은 것이다.<br>\n하지만, 버튼 안의 아이콘과 텍스트를 클릭하면 색이 변하지 않고, StyledButton의 아이콘과 텍스트를 제외한 나머지 영역을 클릭해야 아이콘과 텍스트의 색이\r\n바뀌는 문제가 발생했다. <strong>사용자는 분명 아이콘을 클릭할텐데 말이다!</strong></p>\n<p align=\"center\"> \r\n<img alt=\"bottomnav_img\" src=\"https://raw.githubusercontent.com/timosean/timosean.github.io/0fdb210c89106f7cd1498ce35e19235bdd9d11ee/postimages/prob10.png\">\r\n</p>\n<p>그래서 아이콘과 텍스트가 클릭되어도 무시하고 StyledButton이 클릭되도록 하는 방법을 검색해본 결과, 예상 외로 상당히 간단하게 CSS로 해결할 수 있는\r\n부분이었다. 아이콘과 텍스트에 <code>pointer-events: none;</code>을 주면 아무리 그 위를 클릭해도 무시되고, 대신 부모요소가 클릭된다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">//pointer-events: none 추가\r\n\r\nconst ContentName = styled.div`\r\n  font-size: 9px;\r\n  font-weight: 600;\r\n  color: inherit;\r\n  line-height: 12px;\r\n  letter-spacing: normal;\r\n  margin: 0px;\r\n  pointer-events: none;\r\n`\r\n\r\nconst IconArea = styled.span`\r\n  color: inherit;\r\n  font-size: 22px;\r\n  pointer-events: none;\r\n`</code>\n        </deckgo-highlight-code>\n<br/>\n<h4>(11) Carousel 구현하기 (feat. translate3d, useEffect)</h4>\n<p>Carousel의 이전/다음 button에서 어떻게 disabled를 조건부로 바로바로 설정하고 해제시켜 줄 수 있을까 생각해보았다.<br>\n일단, useState로 카운터를 생성한 다음, '다음'버튼을 누르면 카운트를 1 올리고, '이전'버튼을 누르면 카운트를 1 내리는식으로 카운터를 생성하였다.<br>\n그리고, 각 button의 disabled 속성은 boolean 값을 가지므로, boolean 값을 반환하는 식을 값으로 주었다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">  const [tdCount, setTdCount] = useState(0);\r\n\r\n  //특가 캐로슬에서 이전버튼 클릭 시\r\n  const onLeftBtnClick = () =&gt; {\r\n    setTdCount(tdCount - 1);\r\n  };\r\n\r\n  //특가 캐로슬에서 다음버튼 클릭 시\r\n  const onRightBtnClick = () =&gt; {\r\n    setTdCount(tdCount + 1);\r\n  };\r\n\r\n\r\n &lt;CarouselButton\r\nid=&quot;prevBtn&quot;\r\nonClick={onLeftBtnClick}\r\ndisabled={tdCount === 0}&gt;</code>\n        </deckgo-highlight-code>\n<br/>\n<p>그런데, 문제가 생겼다. 일단 Carousel을 다 만들었는데, useState를 통한 상태 변경이 즉각적으로 이루어지지 않아, Carousel이 즉각적으로 슬라이딩 되지 않았다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">  const [tdCount, setTdCount] = useState(0);\r\n\r\n  //특가 캐로슬에서 이전버튼 클릭 시\r\n  const onLeftBtnClick = () =&gt; {\r\n    setTdCount(tdCount - 1);\r\n    const wrapper = document.querySelector(&quot;.swiper-wrapper&quot;) as HTMLDivElement;\r\n    wrapper.style.transform = `translate3d(${-300 * tdCount + 600}px, 0, 0)`;\r\n  };\r\n\r\n  //특가 캐로슬에서 다음버튼 클릭 시\r\n  const onRightBtnClick = () =&gt; {\r\n    setTdCount(tdCount + 1);\r\n    const wrapper = document.querySelector(&quot;.swiper-wrapper&quot;) as HTMLDivElement;\r\n    wrapper.style.transform = `translate3d(${-300 * tdCount}px, 0, 0)`;\r\n  };</code>\n        </deckgo-highlight-code>\n<br/>\n<p>그래서 다음과 같이, <code>useEffect</code>를 통해 해결하였고, <code>translate3d</code>의 계산식도 다음과 같이 하나로 통일해주었다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">const [tdCount, setTdCount] = useState(0);\r\n\r\n//특가 캐로슬에서 이전버튼 클릭 시\r\nconst onLeftBtnClick = () =&gt; {\r\n  setTdCount((num) =&gt; num - 1);\r\n};\r\n\r\n//특가 캐로슬에서 다음버튼 클릭 시\r\nconst onRightBtnClick = () =&gt; {\r\n  setTdCount((num) =&gt; num + 1);\r\n};\r\n\r\nuseEffect(() =&gt; {\r\n  const wrapper = document.querySelector(&quot;.swiper-wrapper&quot;) as HTMLDivElement;\r\n  wrapper.style.transform = `translate3d(${-300 * tdCount}px, 0, 0)`;\r\n}, [tdCount]);</code>\n        </deckgo-highlight-code>\n<br/>\n<h4>(12) overflow는 주고, 스크롤바는 숨기기</h4>\n<p>모바일뷰로 봤을 때, Carousel에서 overflow는 주고, 스크롤바는 숨기고 싶었다.<br>\n그러기 위해서, 다음과 같이 <code>::-webkit-scrollbar</code>를 통해 스타일링 해주었다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">const SwiperContainer = styled.div`\r\n  margin: 0px auto;\r\n  position: relative;\r\n  overflow: hidden;\r\n  list-style: none;\r\n  padding: 0px;\r\n  z-index: 1;\r\n  box-sizing: border-box;\r\n\r\n  @media only screen and (max-width: 1023px) {\r\n    padding: 0px 24px;\r\n    overflow: auto;\r\n\r\n    &amp;::-webkit-scrollbar {\r\n      display: none;\r\n    }\r\n  }\r\n`</code>\n        </deckgo-highlight-code>\n<br/>\r\n<hr/>\n<h3>📚 활용한 라이브러리 / 프레임워크, 그 이유?</h3>\n<h4>(1) Styled-Components</h4>\n<br/>\r\n<br/>\n<ol>\n<li>\n<p><strong>컴포넌트 단위 스타일링</strong></p>\n<ul>\n<li>Styled-Components는 JavaScript의 템플릿 리터럴과 CSS의 기능을 사용하여 구성 요소에 반응하는 스타일을 제공하는 <code>CSS-in-JS</code> 스타일링을 위한 프레임워크이다.\r\n따라서, Styled-Components를 사용하여 <strong>JavaScript 코드 내에서 일반 CSS로 스타일링한 리액트 컴포넌트를 생성</strong>할 수 있다!</li>\n<li>또, Styled-Components로 생성된 컴포넌트를 빌드하면 <strong>임의의 클래스명</strong>이 정해지고 그 안에 스타일이 적용되어, className이 중복되거나, selector의 우선\r\n순위 적용으로 인한 스타일링에서의 혼선을 방지할 수 있다!\r\n<br/>\r\n<br/></li>\n</ul>\n</li>\n<li>\n<p><strong>조건부 스타일링(Props 전달받기 가능)</strong></p>\n<ul>\n<li>Styled-Components는 컴포넌트의 <strong>Props</strong>를 전달받아 사용하는 것이 가능하다.</li>\n<li>TypeScript에서 props 전달하기 / 전달받기는 [🛠 개발 과정에서 고민했던 것들 (1)번 내용]을 참고하길 바란다.\r\n<br/>\r\n<br/></li>\n</ul>\n</li>\n<li>\n<p><strong>확장 스타일링(코드의 양 대폭 감소)</strong></p>\n<ul>\n<li>\n<p>Styled-Components는 <strong>기존의 컴포넌트 스타일 + 새로운 스타일을 추가</strong>하여 새로운 컴포넌트를 생성할 수 있다. 이렇게 확장 스타일링을 사용하면\r\n중복되는 코드를 줄이고, 유지보수가 훨씬 쉬워진다. 다음과 같이 쉽게 <code>styled(베이스 컴포넌트명)</code>으로 스타일링 가능하다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">const Container = styled.div`\r\n  width: 100px;\r\n  height: 100px;\r\n  border: 1px solid black;\r\n`\r\n\r\nconst GreenContainer = styled(Container)`\r\n  background-color: green;\r\n`</code>\n        </deckgo-highlight-code>\n<br/>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>중첩 스코프, 미디어 쿼리</strong></p>\n<ul>\n<li>\n<p>Styled-Components는 <strong>중첩 스코프 규칙</strong>을 사용할 수 있다. 덕분에, 모든 컴포넌트를 styled-components로 생성하지 않아도,\r\n<strong>하위 컴포넌트에게만 적용하고 싶은 스타일</strong>을 스코프 형태로 구현할 수 있다.</p>\n</li>\n<li>\n<p><code>&#x26;</code>로 자기 자신을 선택할 수 있어서 해당 컴포넌트 중에 id나 className에 따라 다른 스타일을 적용시켜줄 수도 있고, hover, media query도 적용 가능하다.</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">const Container = styled.div`\r\n  width: 100px;\r\n  height: 100px;\r\n  border: 1px solid black;\r\n\r\n  &amp;.smooth-border {\r\n    border-radius: 3px;\r\n  }\r\n\r\n  &amp;:hover {\r\n    background-color: pink;\r\n  }\r\n\r\n  @media only screen and (max-width: 1023px) {\r\n    width: 50px;\r\n    height: 50px;\r\n  }\r\n`\r\n\r\n&lt;Container className=&quot;smooth-border&quot;&gt; ... &lt;/Container&gt;</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n</li>\n</ol>\n<br/>\n<h4>(2) React-icons</h4>\n<br/>\r\n<br/>\n<ol>\n<li>\n<p><strong>스타일링이 편하고, 매우 다양한 아이콘들을 제공한다</strong></p>\n<ul>\n<li>웬만하면 CLASS101 디자인시스템에 있는 아이콘을 쓰려고 했으나, 클론코딩 하기에 유사한 아이콘도 별로 없었을 뿐더러 사용하기(스타일링하기) 쉽지 않았다. (다시 디자인시스템 Icon 목록들 보니까 내가 못 찾고\r\n그냥 넘어갔던 것들이 있긴 있었네..)</li>\n<li>그리고 아이콘의 구체적인 <code>width</code>와 <code>height</code>를 인라인 스타일링으로 줄 수 있어서 좋았다. 디자인시스템 Icon은 그냥 props로 <code>size={24}</code>와 같이 넘기는 옵션 밖에 없는데 <code>width</code>랑 <code>height</code>가 아마 원하는대로\r\n조절이 안 됐었던 것 같다.\r\n<br/>\r\n<br/></li>\n</ul>\n</li>\n</ol>","title":"클론코딩 챌린지","date":"January 12, 2022","next":{"frontmatter":{"path":"/devtest2","title":"dev테스트2"}},"previous":null}},
    "staticQueryHashes": ["3649515864"]}