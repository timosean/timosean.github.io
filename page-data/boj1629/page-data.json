{
    "componentChunkName": "component---src-templates-prob-solving-template-js",
    "path": "/boj1629",
    "result": {"pageContext":{"html":"<h2>문제</h2>\n<p>자연수 A를 B번 곱한 수를 알고 싶다. 단 구하려는 수가 매우 커질 수 있으므로 이를 C로 나눈 나머지를 구하는 프로그램을 작성하시오.</p>\n<h3>입력</h3>\n<ul>\n<li>첫째 줄에 A, B, C가 빈 칸을 사이에 두고 순서대로 주어진다. A, B, C는 모두 2,147,483,647 이하의 자연수이다.</li>\n</ul>\n<h3>출력</h3>\n<ul>\n<li>첫째 줄에 A를 B번 곱한 수를 C로 나눈 나머지를 출력한다.</li>\n</ul>\n<hr />\n<h4>1. 처음 소스코드 및 실수</h4>\n<ul>\n<li><strong>기본 아이디어)</strong><br>\na mod x를 a를 x로 나눴을 때의 나머지라고 표현하면,<br>\n<code>(a × b) mod x = {(a mod x) × (b mod x)} mod x</code>가 성립한다.</li>\n<li>이 아이디어를 이용하여 <code>temp</code>에 반복적으로 <code>temp * (A % C)</code>를 곱하고 C로 나눈 나머지를 저장했다.</li>\n<li>하지만 이 방법은 B까지 한 단계 한 단계 천천히 올라가는 것이므로 <strong>시간 초과</strong>가 발생하였다. 조금 더 빨리 B에 도달할 수 있는 계산 방법을 알아내야 했다.</li>\n</ul>\n<deckgo-highlight-code language=\"cpp\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">#include &lt;iostream&gt;\r\n\r\nint main()\r\n{\r\n    int A, B, C;\r\n    scanf(&quot;%d %d %d&quot;, &amp;A, &amp;B, &amp;C);\r\n\r\n    int temp = A % C;\r\n\r\n    for (int i = 0; i &lt; B - 1; i++)\r\n    {\r\n        temp = (temp * (A % C)) % C;\r\n    }\r\n\r\n    printf(&quot;%d\\n&quot;, temp);\r\n}</code>\n        </deckgo-highlight-code>\n<br/>\n<h4>2. 최종 소스코드 및 해결방법</h4>\n<ul>\n<li><strong>변형 아이디어: 이진수 활용(2의 거듭제곱 활용)</strong><br>\n위의 mod 관련 공식을 사용하는 것은 똑같으나, 시간을 더 줄이기 위해 <strong>2의 거듭제곱을 사용하는 방법</strong>을 채택했다.<br>\n즉, <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>11</mn></msup></mrow><annotation encoding=\"application/x-tex\">10^{11}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">11</span></span></span></span></span></span></span></span></span></span></span></span></span> 을 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>12</mn></mrow><annotation encoding=\"application/x-tex\">12</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">12</span></span></span></span></span> 로 나눈다고 하면, <code>ingredients</code>라는 배열에 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>10</mn></mrow><annotation encoding=\"application/x-tex\">(10</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">10</span></span></span></span></span> % <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>12</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">12)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">12</span><span class=\"mclose\">)</span></span></span></span></span>, <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><msup><mn>0</mn><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">(10^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span> % <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>12</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">12)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">12</span><span class=\"mclose\">)</span></span></span></span></span>, <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup></mrow><annotation encoding=\"application/x-tex\">(10^4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span></span></span></span></span> % <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>12</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">12)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">12</span><span class=\"mclose\">)</span></span></span></span></span>, <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">\\cdots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.313em;\"></span><span class=\"minner\">⋯</span></span></span></span></span> 를 저장해두고,\r\n11을 이진수로 바꿔서 위의 <code>ingredients</code> 배열에서 필요한 값만 뽑아다가 쓰는 방식이다.</li>\n<li>그렇게 되면 위의 1번 방법처럼 하나 하나 곱해나가는 것 보단 훨씬 빠르게 된다.</li>\n<li>자세한 것은 주석 참고</li>\n</ul>\n<deckgo-highlight-code language=\"cpp\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">#include &lt;iostream&gt;\r\n\r\nint MAX_LENGTH = 100;\r\n\r\nint main()\r\n{\r\n    //result: 최종결과\r\n    //start: 최종결과를 구하기 위해 필요한 인덱스\r\n    long long A, B, C;\r\n    long long result = 1;\r\n    long long start;\r\n    scanf(&quot;%lld %lld %lld&quot;, &amp;A, &amp;B, &amp;C);\r\n\r\n    //toBinary: B를 이진수로 바꿔 저장한다.\r\n    //binIndex: toBinary에서 사용할 인덱스 변수\r\n    int toBinary[MAX_LENGTH] = {\r\n        0,\r\n    };\r\n    int binIndex = 0;\r\n\r\n    //ingredients: 답을 구하기 위한 계산의 재료들이 저장됨.\r\n    //재료들이란, A%C, (A^2)%C, (A^4)%C, (A^8)%C 등을 일컫는다.\r\n    //temp: 재료들을 만들 임시 변수\r\n    long long ingredients[MAX_LENGTH];\r\n    long long temp = A % C;\r\n    ingredients[0] = temp;\r\n\r\n    //B를 이진수로 바꿔 저장하는 작업\r\n    while (B &gt; 0)\r\n    {\r\n        toBinary[binIndex] = B % 2;\r\n        binIndex++;\r\n        B /= 2;\r\n    }\r\n\r\n    //재료들을 필요한만큼(binIndex만큼) 계산하여 준비해두는 과정\r\n    for (int i = 1; i &lt; binIndex; i++)\r\n    {\r\n        ingredients[i] = (ingredients[i - 1] * ingredients[i - 1]) % C;\r\n    }\r\n\r\n    //toBinary에서 처음 1이 나온 칸에 대응하는 수를 result에 저장\r\n    //최종 결과를 구하기 위해 start에 binIndex를 탐색할 인덱스를 저장\r\n    for (int i = 0; i &lt; binIndex; i++)\r\n    {\r\n        if (toBinary[i])\r\n        {\r\n            result = ingredients[i];\r\n            start = i + 1;\r\n            break;\r\n        }\r\n    }\r\n\r\n    //toBinary에서 1이 나올때마다 result를 업데이트\r\n    for (int i = start; i &lt; binIndex; i++)\r\n    {\r\n        if (toBinary[i])\r\n        {\r\n            result = (result * ingredients[i]) % C;\r\n        }\r\n    }\r\n\r\n    printf(&quot;%d\\n&quot;, result);\r\n}</code>\n        </deckgo-highlight-code>","title":"[C++] BOJ #1629 곱셈","date":"2022. 01. 30","next":{"frontmatter":{"path":"/boj1016","title":"[C++] BOJ #1016 제곱ㄴㄴ수"}},"previous":{"frontmatter":{"path":"/boj13171","title":"[C++] BOJ #13171 A"}}}},
    "staticQueryHashes": ["3649515864"]}